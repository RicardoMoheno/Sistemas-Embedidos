
Assignment 5 - FreeRTOS Multitaksing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070c4  080070c4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080070c4  080070c4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070c4  080070c4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070c8  080070c8  000170c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080070cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e80  20000010  080070dc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e90  080070dc  00021e90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fe4  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003119  00000000  00000000  0003501d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00038138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  00039410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002be5  00000000  00000000  0003a590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e03  00000000  00000000  0003d175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009662d  00000000  00000000  00053f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea5a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f90  00000000  00000000  000ea5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08006eb0 	.word	0x08006eb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08006eb0 	.word	0x08006eb0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2uiz>:
 800093c:	004a      	lsls	r2, r1, #1
 800093e:	d211      	bcs.n	8000964 <__aeabi_d2uiz+0x28>
 8000940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000944:	d211      	bcs.n	800096a <__aeabi_d2uiz+0x2e>
 8000946:	d50d      	bpl.n	8000964 <__aeabi_d2uiz+0x28>
 8000948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800094c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000950:	d40e      	bmi.n	8000970 <__aeabi_d2uiz+0x34>
 8000952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800095a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800095e:	fa23 f002 	lsr.w	r0, r3, r2
 8000962:	4770      	bx	lr
 8000964:	f04f 0000 	mov.w	r0, #0
 8000968:	4770      	bx	lr
 800096a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800096e:	d102      	bne.n	8000976 <__aeabi_d2uiz+0x3a>
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	4770      	bx	lr
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	4770      	bx	lr

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000980:	f000 ffb2 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000984:	f000 f88c 	bl	8000aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f000 f9ba 	bl	8000d00 <MX_GPIO_Init>
  MX_ADC1_Init();
 800098c:	f000 f8e4 	bl	8000b58 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000990:	f000 f920 	bl	8000bd4 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000994:	f000 f95c 	bl	8000c50 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000998:	4829      	ldr	r0, [pc, #164]	; (8000a40 <main+0xc4>)
 800099a:	f002 fd5b 	bl	8003454 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800099e:	2100      	movs	r1, #0
 80009a0:	4827      	ldr	r0, [pc, #156]	; (8000a40 <main+0xc4>)
 80009a2:	f002 fe43 	bl	800362c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009a6:	f003 fb4b 	bl	8004040 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of breakQueue */
  breakQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &breakQueue_attributes);
 80009aa:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <main+0xc8>)
 80009ac:	2102      	movs	r1, #2
 80009ae:	2010      	movs	r0, #16
 80009b0:	f003 fc84 	bl	80042bc <osMessageQueueNew>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <main+0xcc>)
 80009b8:	6013      	str	r3, [r2, #0]

  /* creation of throttleQueue */
  throttleQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &throttleQueue_attributes);
 80009ba:	4a24      	ldr	r2, [pc, #144]	; (8000a4c <main+0xd0>)
 80009bc:	2102      	movs	r1, #2
 80009be:	2010      	movs	r0, #16
 80009c0:	f003 fc7c 	bl	80042bc <osMessageQueueNew>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <main+0xd4>)
 80009c8:	6013      	str	r3, [r2, #0]

  /* creation of gearQueue */
  gearQueueHandle = osMessageQueueNew (16, sizeof(char), &gearQueue_attributes);
 80009ca:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <main+0xd8>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	2010      	movs	r0, #16
 80009d0:	f003 fc74 	bl	80042bc <osMessageQueueNew>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a20      	ldr	r2, [pc, #128]	; (8000a58 <main+0xdc>)
 80009d8:	6013      	str	r3, [r2, #0]

  /* creation of speedQueue */
  speedQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &speedQueue_attributes);
 80009da:	4a20      	ldr	r2, [pc, #128]	; (8000a5c <main+0xe0>)
 80009dc:	2104      	movs	r1, #4
 80009de:	2010      	movs	r0, #16
 80009e0:	f003 fc6c 	bl	80042bc <osMessageQueueNew>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a1e      	ldr	r2, [pc, #120]	; (8000a60 <main+0xe4>)
 80009e8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of breakTask */
  breakTaskHandle = osThreadNew(startBreakInputTask, NULL, &breakTask_attributes);
 80009ea:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <main+0xe8>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	481e      	ldr	r0, [pc, #120]	; (8000a68 <main+0xec>)
 80009f0:	f003 fb8c 	bl	800410c <osThreadNew>
 80009f4:	4603      	mov	r3, r0
 80009f6:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <main+0xf0>)
 80009f8:	6013      	str	r3, [r2, #0]

  /* creation of throttleTask */
  throttleTaskHandle = osThreadNew(startThrottleInputTask, NULL, &throttleTask_attributes);
 80009fa:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <main+0xf4>)
 80009fc:	2100      	movs	r1, #0
 80009fe:	481d      	ldr	r0, [pc, #116]	; (8000a74 <main+0xf8>)
 8000a00:	f003 fb84 	bl	800410c <osThreadNew>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <main+0xfc>)
 8000a08:	6013      	str	r3, [r2, #0]

  /* creation of gearSelectTask */
  gearSelectTaskHandle = osThreadNew(startGearSelectTask, NULL, &gearSelectTask_attributes);
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <main+0x100>)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <main+0x104>)
 8000a10:	f003 fb7c 	bl	800410c <osThreadNew>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4a1b      	ldr	r2, [pc, #108]	; (8000a84 <main+0x108>)
 8000a18:	6013      	str	r3, [r2, #0]

  /* creation of dataProcTask */
  dataProcTaskHandle = osThreadNew(startDataProcessTask, NULL, &dataProcTask_attributes);
 8000a1a:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <main+0x10c>)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	481b      	ldr	r0, [pc, #108]	; (8000a8c <main+0x110>)
 8000a20:	f003 fb74 	bl	800410c <osThreadNew>
 8000a24:	4603      	mov	r3, r0
 8000a26:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <main+0x114>)
 8000a28:	6013      	str	r3, [r2, #0]

  /* creation of outputDispTask */
  outputDispTaskHandle = osThreadNew(startOutputDispTask, NULL, &outputDispTask_attributes);
 8000a2a:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <main+0x118>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	481a      	ldr	r0, [pc, #104]	; (8000a98 <main+0x11c>)
 8000a30:	f003 fb6c 	bl	800410c <osThreadNew>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <main+0x120>)
 8000a38:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a3a:	f003 fb33 	bl	80040a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <main+0xc2>
 8000a40:	2000008c 	.word	0x2000008c
 8000a44:	0800704c 	.word	0x0800704c
 8000a48:	200000e8 	.word	0x200000e8
 8000a4c:	08007064 	.word	0x08007064
 8000a50:	200000ec 	.word	0x200000ec
 8000a54:	0800707c 	.word	0x0800707c
 8000a58:	200000f0 	.word	0x200000f0
 8000a5c:	08007094 	.word	0x08007094
 8000a60:	200000f4 	.word	0x200000f4
 8000a64:	08006f98 	.word	0x08006f98
 8000a68:	08001079 	.word	0x08001079
 8000a6c:	200000d4 	.word	0x200000d4
 8000a70:	08006fbc 	.word	0x08006fbc
 8000a74:	080010e9 	.word	0x080010e9
 8000a78:	200000d8 	.word	0x200000d8
 8000a7c:	08006fe0 	.word	0x08006fe0
 8000a80:	08001159 	.word	0x08001159
 8000a84:	200000dc 	.word	0x200000dc
 8000a88:	08007004 	.word	0x08007004
 8000a8c:	080011d9 	.word	0x080011d9
 8000a90:	200000e0 	.word	0x200000e0
 8000a94:	08007028 	.word	0x08007028
 8000a98:	08001451 	.word	0x08001451
 8000a9c:	200000e4 	.word	0x200000e4

08000aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b094      	sub	sp, #80	; 0x50
 8000aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aaa:	2228      	movs	r2, #40	; 0x28
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f006 f9f6 	bl	8006ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000aec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000af0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fe94 	bl	8002824 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b02:	f000 fd21 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2102      	movs	r1, #2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f002 f900 	bl	8002d28 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b2e:	f000 fd0b 	bl	8001548 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b32:	2302      	movs	r3, #2
 8000b34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b3a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 faba 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b4a:	f000 fcfd 	bl	8001548 <Error_Handler>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	3750      	adds	r7, #80	; 0x50
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <MX_ADC1_Init+0x74>)
 8000b6a:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <MX_ADC1_Init+0x78>)
 8000b6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_ADC1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b74:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <MX_ADC1_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <MX_ADC1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <MX_ADC1_Init+0x74>)
 8000b82:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b88:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <MX_ADC1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <MX_ADC1_Init+0x74>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MX_ADC1_Init+0x74>)
 8000b96:	f000 fed9 	bl	800194c <HAL_ADC_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 fcd2 	bl	8001548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	; (8000bcc <MX_ADC1_Init+0x74>)
 8000bb6:	f001 f961 	bl	8001e7c <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bc0:	f000 fcc2 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	2000002c 	.word	0x2000002c
 8000bd0:	40012400 	.word	0x40012400

08000bd4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <MX_ADC2_Init+0x74>)
 8000be6:	4a19      	ldr	r2, [pc, #100]	; (8000c4c <MX_ADC2_Init+0x78>)
 8000be8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_ADC2_Init+0x74>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <MX_ADC2_Init+0x74>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <MX_ADC2_Init+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_ADC2_Init+0x74>)
 8000bfe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c02:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c04:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_ADC2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_ADC2_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <MX_ADC2_Init+0x74>)
 8000c12:	f000 fe9b 	bl	800194c <HAL_ADC_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 fc94 	bl	8001548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c20:	2304      	movs	r3, #4
 8000c22:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_ADC2_Init+0x74>)
 8000c32:	f001 f923 	bl	8001e7c <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000c3c:	f000 fc84 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	2000005c 	.word	0x2000005c
 8000c4c:	40012800 	.word	0x40012800

08000c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c56:	f107 0320 	add.w	r3, r7, #32
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
 8000c6e:	615a      	str	r2, [r3, #20]
 8000c70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c72:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000c88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c9a:	4818      	ldr	r0, [pc, #96]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000c9c:	f002 fc76 	bl	800358c <HAL_TIM_PWM_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000ca6:	f000 fc4f 	bl	8001548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4810      	ldr	r0, [pc, #64]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000cba:	f003 f951 	bl	8003f60 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000cc4:	f000 fc40 	bl	8001548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc8:	2360      	movs	r3, #96	; 0x60
 8000cca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000ce0:	f002 fe4e 	bl	8003980 <HAL_TIM_PWM_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000cea:	f000 fc2d 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cee:	4803      	ldr	r0, [pc, #12]	; (8000cfc <MX_TIM2_Init+0xac>)
 8000cf0:	f000 fcea 	bl	80016c8 <HAL_TIM_MspPostInit>

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	; 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000008c 	.word	0x2000008c

08000d00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0320 	and.w	r3, r3, #32
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	6193      	str	r3, [r2, #24]
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_GPIO_Init+0xd0>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, dispRS_Pin|dispRW_Pin|dispEN_Pin, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2107      	movs	r1, #7
 8000d60:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d62:	f001 fd46 	bl	80027f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, dispD7_Pin|dispD0_Pin|dispD1_Pin|dispD2_Pin
 8000d66:	2200      	movs	r2, #0
 8000d68:	f44f 61ff 	mov.w	r1, #2040	; 0x7f8
 8000d6c:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000d6e:	f001 fd40 	bl	80027f2 <HAL_GPIO_WritePin>
                          |dispD3_Pin|dispD4_Pin|disoD5_Pin|dispD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : dispRS_Pin dispRW_Pin dispEN_Pin */
  GPIO_InitStruct.Pin = dispRS_Pin|dispRW_Pin|dispEN_Pin;
 8000d72:	2307      	movs	r3, #7
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	4619      	mov	r1, r3
 8000d88:	4812      	ldr	r0, [pc, #72]	; (8000dd4 <MX_GPIO_Init+0xd4>)
 8000d8a:	f001 fb97 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : gearSelectB1_Pin gearSelectB0_Pin */
  GPIO_InitStruct.Pin = gearSelectB1_Pin|gearSelectB0_Pin;
 8000d8e:	f640 0302 	movw	r3, #2050	; 0x802
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	480d      	ldr	r0, [pc, #52]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000da4:	f001 fb8a 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : dispD7_Pin dispD0_Pin dispD1_Pin dispD2_Pin
                           dispD3_Pin dispD4_Pin disoD5_Pin dispD6_Pin */
  GPIO_InitStruct.Pin = dispD7_Pin|dispD0_Pin|dispD1_Pin|dispD2_Pin
 8000da8:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 8000dac:	613b      	str	r3, [r7, #16]
                          |dispD3_Pin|dispD4_Pin|disoD5_Pin|dispD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_GPIO_Init+0xd8>)
 8000dc2:	f001 fb7b 	bl	80024bc <HAL_GPIO_Init>

}
 8000dc6:	bf00      	nop
 8000dc8:	3720      	adds	r7, #32
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00

08000ddc <LCD_init>:

/* USER CODE BEGIN 4 */
void LCD_init(){
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(controlPort,dispRS_Pin,GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2101      	movs	r1, #1
 8000de4:	4813      	ldr	r0, [pc, #76]	; (8000e34 <LCD_init+0x58>)
 8000de6:	f001 fd04 	bl	80027f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlPort,dispRW_Pin,GPIO_PIN_RESET);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2102      	movs	r1, #2
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <LCD_init+0x58>)
 8000df0:	f001 fcff 	bl	80027f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlPort,dispEN_Pin,GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	480e      	ldr	r0, [pc, #56]	; (8000e34 <LCD_init+0x58>)
 8000dfa:	f001 fcfa 	bl	80027f2 <HAL_GPIO_WritePin>
    LCD_cmd(setLCD_8bits_2Lines_smallFont);
 8000dfe:	2038      	movs	r0, #56	; 0x38
 8000e00:	f000 f81a 	bl	8000e38 <LCD_cmd>
    osDelay(250);
 8000e04:	20fa      	movs	r0, #250	; 0xfa
 8000e06:	f003 fa2b 	bl	8004260 <osDelay>
    LCD_cmd(DISPLAY_ON_C_OFF_B_OFF);
 8000e0a:	200c      	movs	r0, #12
 8000e0c:	f000 f814 	bl	8000e38 <LCD_cmd>
    osDelay(250);
 8000e10:	20fa      	movs	r0, #250	; 0xfa
 8000e12:	f003 fa25 	bl	8004260 <osDelay>
    LCD_cmd(Clear_DISP);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 f80e 	bl	8000e38 <LCD_cmd>
    osDelay(250);
 8000e1c:	20fa      	movs	r0, #250	; 0xfa
 8000e1e:	f003 fa1f 	bl	8004260 <osDelay>
    set_LCD_dir('R');
 8000e22:	2052      	movs	r0, #82	; 0x52
 8000e24:	f000 f85a 	bl	8000edc <set_LCD_dir>
    osDelay(250);
 8000e28:	20fa      	movs	r0, #250	; 0xfa
 8000e2a:	f003 fa19 	bl	8004260 <osDelay>
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40010800 	.word	0x40010800

08000e38 <LCD_cmd>:
void LCD_cmd(char cx) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlPort,dispRS_Pin,GPIO_PIN_RESET); // select IR register
 8000e42:	2200      	movs	r2, #0
 8000e44:	2101      	movs	r1, #1
 8000e46:	480e      	ldr	r0, [pc, #56]	; (8000e80 <LCD_cmd+0x48>)
 8000e48:	f001 fcd3 	bl	80027f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlPort,dispRW_Pin,GPIO_PIN_RESET); // set Write mode
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2102      	movs	r1, #2
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <LCD_cmd+0x48>)
 8000e52:	f001 fcce 	bl	80027f2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(controlPort,dispEN_Pin,GPIO_PIN_SET);    // set to clock data
 8000e56:	2201      	movs	r2, #1
 8000e58:	2104      	movs	r1, #4
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <LCD_cmd+0x48>)
 8000e5c:	f001 fcc9 	bl	80027f2 <HAL_GPIO_WritePin>
    __NOP();
 8000e60:	bf00      	nop
    dataPort -> ODR = (0b00000000000|cx) << 3;   // send out command
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	00da      	lsls	r2, r3, #3
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <LCD_cmd+0x4c>)
 8000e68:	60da      	str	r2, [r3, #12]
    __NOP();
 8000e6a:	bf00      	nop
    HAL_GPIO_WritePin(controlPort,dispEN_Pin,GPIO_PIN_RESET);  // complete external write cycle
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <LCD_cmd+0x48>)
 8000e72:	f001 fcbe 	bl	80027f2 <HAL_GPIO_WritePin>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010800 	.word	0x40010800
 8000e84:	40010c00 	.word	0x40010c00

08000e88 <send_to_LCD>:
void send_to_LCD(char xy){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(controlPort,dispRS_Pin,GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2101      	movs	r1, #1
 8000e96:	480f      	ldr	r0, [pc, #60]	; (8000ed4 <send_to_LCD+0x4c>)
 8000e98:	f001 fcab 	bl	80027f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlPort,dispRW_Pin,GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2102      	movs	r1, #2
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <send_to_LCD+0x4c>)
 8000ea2:	f001 fca6 	bl	80027f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(controlPort,dispEN_Pin,GPIO_PIN_SET);
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <send_to_LCD+0x4c>)
 8000eac:	f001 fca1 	bl	80027f2 <HAL_GPIO_WritePin>
    __NOP();
 8000eb0:	bf00      	nop
	dataPort -> ODR = (0b00000000000|xy) << 3;
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	00da      	lsls	r2, r3, #3
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <send_to_LCD+0x50>)
 8000eb8:	60da      	str	r2, [r3, #12]
    __NOP();
 8000eba:	bf00      	nop
    HAL_GPIO_WritePin(controlPort,dispEN_Pin,GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <send_to_LCD+0x4c>)
 8000ec2:	f001 fc96 	bl	80027f2 <HAL_GPIO_WritePin>
    osDelay(10);
 8000ec6:	200a      	movs	r0, #10
 8000ec8:	f003 f9ca 	bl	8004260 <osDelay>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40010800 	.word	0x40010800
 8000ed8:	40010c00 	.word	0x40010c00

08000edc <set_LCD_dir>:
void set_LCD_dir(char d){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
    if(d == 'L'){
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b4c      	cmp	r3, #76	; 0x4c
 8000eea:	d106      	bne.n	8000efa <set_LCD_dir+0x1e>
        LCD_cmd(EMS_DEC_S);
 8000eec:	2004      	movs	r0, #4
 8000eee:	f7ff ffa3 	bl	8000e38 <LCD_cmd>
        LCDdir = 'L';
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <set_LCD_dir+0x38>)
 8000ef4:	224c      	movs	r2, #76	; 0x4c
 8000ef6:	701a      	strb	r2, [r3, #0]
    } else if (d == 'R'){
        LCD_cmd(EMS_INC_S);
        LCDdir = 'R';
    }
}
 8000ef8:	e008      	b.n	8000f0c <set_LCD_dir+0x30>
    } else if (d == 'R'){
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b52      	cmp	r3, #82	; 0x52
 8000efe:	d105      	bne.n	8000f0c <set_LCD_dir+0x30>
        LCD_cmd(EMS_INC_S);
 8000f00:	2006      	movs	r0, #6
 8000f02:	f7ff ff99 	bl	8000e38 <LCD_cmd>
        LCDdir = 'R';
 8000f06:	4b03      	ldr	r3, [pc, #12]	; (8000f14 <set_LCD_dir+0x38>)
 8000f08:	2252      	movs	r2, #82	; 0x52
 8000f0a:	701a      	strb	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200000f8 	.word	0x200000f8

08000f18 <set_cursor_pos>:
void set_cursor_pos(char row,char col){
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	460a      	mov	r2, r1
 8000f22:	71fb      	strb	r3, [r7, #7]
 8000f24:	4613      	mov	r3, r2
 8000f26:	71bb      	strb	r3, [r7, #6]
    unsigned char Pos = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
    switch (row){
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <set_cursor_pos+0x20>
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d009      	beq.n	8000f4a <set_cursor_pos+0x32>
 8000f36:	e011      	b.n	8000f5c <set_cursor_pos+0x44>
        case 0: {
            Pos = 0x80|col;
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f3e:	73fb      	strb	r3, [r7, #15]
            LCD_cmd(Pos);
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff78 	bl	8000e38 <LCD_cmd>
        } break;
 8000f48:	e00a      	b.n	8000f60 <set_cursor_pos+0x48>
        case 1: {
            Pos = 0xC0|col;
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000f50:	73fb      	strb	r3, [r7, #15]
            LCD_cmd(Pos);
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff6f 	bl	8000e38 <LCD_cmd>
        } break;
 8000f5a:	e001      	b.n	8000f60 <set_cursor_pos+0x48>
        default: __NOP(); break;
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
    }
    osDelay(10);
 8000f60:	200a      	movs	r0, #10
 8000f62:	f003 f97d 	bl	8004260 <osDelay>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <write_string_LCD>:
        for (int i = 0; i <n ;i++){
        LCD_cmd(CURSOR_MOVE_LEFT);
        }
    }
}
void write_string_LCD(const char *s){
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
    while(*s)
 8000f76:	e006      	b.n	8000f86 <write_string_LCD+0x18>
        send_to_LCD(*s++);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff81 	bl	8000e88 <send_to_LCD>
    while(*s)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f4      	bne.n	8000f78 <write_string_LCD+0xa>
    osDelay(10);
 8000f8e:	200a      	movs	r0, #10
 8000f90:	f003 f966 	bl	8004260 <osDelay>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <write_int_LCD>:
void write_int_LCD(int x){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    unsigned char UnitDigit  = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
    unsigned char TenthDigit = 0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73bb      	strb	r3, [r7, #14]
    unsigned char HundrethDigit = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	737b      	strb	r3, [r7, #13]
    HundrethDigit = x/100;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a2e      	ldr	r2, [pc, #184]	; (800106c <write_int_LCD+0xd0>)
 8000fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb8:	1152      	asrs	r2, r2, #5
 8000fba:	17db      	asrs	r3, r3, #31
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	737b      	strb	r3, [r7, #13]
    TenthDigit = (x - HundrethDigit*100)/10;
 8000fc0:	7b7b      	ldrb	r3, [r7, #13]
 8000fc2:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000fc6:	fb03 f202 	mul.w	r2, r3, r2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a28      	ldr	r2, [pc, #160]	; (8001070 <write_int_LCD+0xd4>)
 8000fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd4:	1092      	asrs	r2, r2, #2
 8000fd6:	17db      	asrs	r3, r3, #31
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	73bb      	strb	r3, [r7, #14]
    UnitDigit = x - TenthDigit*10 - HundrethDigit*100;
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	0152      	lsls	r2, r2, #5
 8000fe2:	1ad2      	subs	r2, r2, r3
 8000fe4:	0092      	lsls	r2, r2, #2
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	7b7b      	ldrb	r3, [r7, #13]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	0089      	lsls	r1, r1, #2
 8000ff2:	4419      	add	r1, r3
 8000ff4:	00c9      	lsls	r1, r1, #3
 8000ff6:	1acb      	subs	r3, r1, r3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	4413      	add	r3, r2
 8001006:	73fb      	strb	r3, [r7, #15]
    if(LCDdir == 'R'){
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <write_int_LCD+0xd8>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b52      	cmp	r3, #82	; 0x52
 800100e:	d112      	bne.n	8001036 <write_int_LCD+0x9a>
        send_to_LCD(HundrethDigit+'0');
 8001010:	7b7b      	ldrb	r3, [r7, #13]
 8001012:	3330      	adds	r3, #48	; 0x30
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ff36 	bl	8000e88 <send_to_LCD>
        send_to_LCD(TenthDigit+'0');
 800101c:	7bbb      	ldrb	r3, [r7, #14]
 800101e:	3330      	adds	r3, #48	; 0x30
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ff30 	bl	8000e88 <send_to_LCD>
        send_to_LCD(UnitDigit+'0');
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	3330      	adds	r3, #48	; 0x30
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff2a 	bl	8000e88 <send_to_LCD>
    } else if(LCDdir == 'L'){
        send_to_LCD(UnitDigit+'0');
        send_to_LCD(TenthDigit+'0');
        send_to_LCD(HundrethDigit+'0');
    }
}
 8001034:	e015      	b.n	8001062 <write_int_LCD+0xc6>
    } else if(LCDdir == 'L'){
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <write_int_LCD+0xd8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b4c      	cmp	r3, #76	; 0x4c
 800103c:	d111      	bne.n	8001062 <write_int_LCD+0xc6>
        send_to_LCD(UnitDigit+'0');
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	3330      	adds	r3, #48	; 0x30
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff1f 	bl	8000e88 <send_to_LCD>
        send_to_LCD(TenthDigit+'0');
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	3330      	adds	r3, #48	; 0x30
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff19 	bl	8000e88 <send_to_LCD>
        send_to_LCD(HundrethDigit+'0');
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	3330      	adds	r3, #48	; 0x30
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff13 	bl	8000e88 <send_to_LCD>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	51eb851f 	.word	0x51eb851f
 8001070:	66666667 	.word	0x66666667
 8001074:	200000f8 	.word	0x200000f8

08001078 <startBreakInputTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startBreakInputTask */
void startBreakInputTask(void *argument)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	HAL_ADCEx_Calibration_Start(&hadc1);
 8001080:	4817      	ldr	r0, [pc, #92]	; (80010e0 <startBreakInputTask+0x68>)
 8001082:	f001 f88f 	bl	80021a4 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 8001086:	4816      	ldr	r0, [pc, #88]	; (80010e0 <startBreakInputTask+0x68>)
 8001088:	f000 fd38 	bl	8001afc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,300);
 800108c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001090:	4813      	ldr	r0, [pc, #76]	; (80010e0 <startBreakInputTask+0x68>)
 8001092:	f000 fde1 	bl	8001c58 <HAL_ADC_PollForConversion>
	int breakMeasured = HAL_ADC_GetValue(&hadc1);
 8001096:	4812      	ldr	r0, [pc, #72]	; (80010e0 <startBreakInputTask+0x68>)
 8001098:	f000 fee4 	bl	8001e64 <HAL_ADC_GetValue>
 800109c:	4603      	mov	r3, r0
 800109e:	60fb      	str	r3, [r7, #12]
	int breakPercentage = breakMeasured*(100.0/4081.0);
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff f9a7 	bl	80003f4 <__aeabi_i2d>
 80010a6:	a30c      	add	r3, pc, #48	; (adr r3, 80010d8 <startBreakInputTask+0x60>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	f7ff fa0c 	bl	80004c8 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fc18 	bl	80008ec <__aeabi_d2iz>
 80010bc:	4603      	mov	r3, r0
 80010be:	60bb      	str	r3, [r7, #8]
	osMessageQueuePut(breakQueueHandle, &breakPercentage, 0, 200);
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <startBreakInputTask+0x6c>)
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	f107 0108 	add.w	r1, r7, #8
 80010c8:	23c8      	movs	r3, #200	; 0xc8
 80010ca:	2200      	movs	r2, #0
 80010cc:	f003 f97c 	bl	80043c8 <osMessageQueuePut>
    osDelay(10);
 80010d0:	200a      	movs	r0, #10
 80010d2:	f003 f8c5 	bl	8004260 <osDelay>
  {
 80010d6:	e7d6      	b.n	8001086 <startBreakInputTask+0xe>
 80010d8:	0dacd205 	.word	0x0dacd205
 80010dc:	3f991786 	.word	0x3f991786
 80010e0:	2000002c 	.word	0x2000002c
 80010e4:	200000e8 	.word	0x200000e8

080010e8 <startThrottleInputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startThrottleInputTask */
void startThrottleInputTask(void *argument)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startThrottleInputTask */
	HAL_ADCEx_Calibration_Start(&hadc2);
 80010f0:	4817      	ldr	r0, [pc, #92]	; (8001150 <startThrottleInputTask+0x68>)
 80010f2:	f001 f857 	bl	80021a4 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc2);
 80010f6:	4816      	ldr	r0, [pc, #88]	; (8001150 <startThrottleInputTask+0x68>)
 80010f8:	f000 fd00 	bl	8001afc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2,300);
 80010fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <startThrottleInputTask+0x68>)
 8001102:	f000 fda9 	bl	8001c58 <HAL_ADC_PollForConversion>
	int throttleMeasured = HAL_ADC_GetValue(&hadc2);
 8001106:	4812      	ldr	r0, [pc, #72]	; (8001150 <startThrottleInputTask+0x68>)
 8001108:	f000 feac 	bl	8001e64 <HAL_ADC_GetValue>
 800110c:	4603      	mov	r3, r0
 800110e:	60fb      	str	r3, [r7, #12]
	int throttlePercentage = throttleMeasured*(100.0/4081.0);
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff f96f 	bl	80003f4 <__aeabi_i2d>
 8001116:	a30c      	add	r3, pc, #48	; (adr r3, 8001148 <startThrottleInputTask+0x60>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff f9d4 	bl	80004c8 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fbe0 	bl	80008ec <__aeabi_d2iz>
 800112c:	4603      	mov	r3, r0
 800112e:	60bb      	str	r3, [r7, #8]
	osMessageQueuePut(throttleQueueHandle, &throttlePercentage, 0, 200);
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <startThrottleInputTask+0x6c>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	f107 0108 	add.w	r1, r7, #8
 8001138:	23c8      	movs	r3, #200	; 0xc8
 800113a:	2200      	movs	r2, #0
 800113c:	f003 f944 	bl	80043c8 <osMessageQueuePut>
	osDelay(10);
 8001140:	200a      	movs	r0, #10
 8001142:	f003 f88d 	bl	8004260 <osDelay>
  {
 8001146:	e7d6      	b.n	80010f6 <startThrottleInputTask+0xe>
 8001148:	0dacd205 	.word	0x0dacd205
 800114c:	3f991786 	.word	0x3f991786
 8001150:	2000005c 	.word	0x2000005c
 8001154:	200000ec 	.word	0x200000ec

08001158 <startGearSelectTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startGearSelectTask */
void startGearSelectTask(void *argument)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startGearSelectTask */
	char N = 'N';
 8001160:	234e      	movs	r3, #78	; 0x4e
 8001162:	73fb      	strb	r3, [r7, #15]
	char gear1 = '1';
 8001164:	2331      	movs	r3, #49	; 0x31
 8001166:	73bb      	strb	r3, [r7, #14]
	char gear2 = '2';
 8001168:	2332      	movs	r3, #50	; 0x32
 800116a:	737b      	strb	r3, [r7, #13]
	int bit0,bit1;
  /* Infinite loop */
  for(;;)
  {
	bit0 = HAL_GPIO_ReadPin(GPIOB,gearSelectB0_Pin);
 800116c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001170:	4817      	ldr	r0, [pc, #92]	; (80011d0 <startGearSelectTask+0x78>)
 8001172:	f001 fb27 	bl	80027c4 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	617b      	str	r3, [r7, #20]
	bit1 = HAL_GPIO_ReadPin(GPIOB,gearSelectB1_Pin);
 800117a:	2102      	movs	r1, #2
 800117c:	4814      	ldr	r0, [pc, #80]	; (80011d0 <startGearSelectTask+0x78>)
 800117e:	f001 fb21 	bl	80027c4 <HAL_GPIO_ReadPin>
 8001182:	4603      	mov	r3, r0
 8001184:	613b      	str	r3, [r7, #16]
	if (bit0 == 1){
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d108      	bne.n	800119e <startGearSelectTask+0x46>
		osMessageQueuePut(gearQueueHandle,&N,0,200);
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <startGearSelectTask+0x7c>)
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	f107 010f 	add.w	r1, r7, #15
 8001194:	23c8      	movs	r3, #200	; 0xc8
 8001196:	2200      	movs	r2, #0
 8001198:	f003 f916 	bl	80043c8 <osMessageQueuePut>
 800119c:	e013      	b.n	80011c6 <startGearSelectTask+0x6e>
	} else if (bit1 == 1){
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d108      	bne.n	80011b6 <startGearSelectTask+0x5e>
		osMessageQueuePut(gearQueueHandle,&gear2,0,200);
 80011a4:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <startGearSelectTask+0x7c>)
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	f107 010d 	add.w	r1, r7, #13
 80011ac:	23c8      	movs	r3, #200	; 0xc8
 80011ae:	2200      	movs	r2, #0
 80011b0:	f003 f90a 	bl	80043c8 <osMessageQueuePut>
 80011b4:	e007      	b.n	80011c6 <startGearSelectTask+0x6e>
	} else osMessageQueuePut(gearQueueHandle,&gear1,0,200);
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <startGearSelectTask+0x7c>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	f107 010e 	add.w	r1, r7, #14
 80011be:	23c8      	movs	r3, #200	; 0xc8
 80011c0:	2200      	movs	r2, #0
 80011c2:	f003 f901 	bl	80043c8 <osMessageQueuePut>
    osDelay(50);
 80011c6:	2032      	movs	r0, #50	; 0x32
 80011c8:	f003 f84a 	bl	8004260 <osDelay>
	bit0 = HAL_GPIO_ReadPin(GPIOB,gearSelectB0_Pin);
 80011cc:	e7ce      	b.n	800116c <startGearSelectTask+0x14>
 80011ce:	bf00      	nop
 80011d0:	40010c00 	.word	0x40010c00
 80011d4:	200000f0 	.word	0x200000f0

080011d8 <startDataProcessTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startDataProcessTask */
void startDataProcessTask(void *argument)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDataProcessTask */
	int breakPercentageReceived = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
	int throttlePercentageReceived = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
	char requestedGear = 'N';
 80011e8:	234e      	movs	r3, #78	; 0x4e
 80011ea:	74fb      	strb	r3, [r7, #19]
	int desiredSpeed = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60fb      	str	r3, [r7, #12]
	int maxSpeed;
	int acceleration;
  /* Infinite loop */
  for(;;)
  {
	int breakPercentageSum = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	637b      	str	r3, [r7, #52]	; 0x34
	int throttlePercentageSum = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 0; i < 16; i++){
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011fc:	e01a      	b.n	8001234 <startDataProcessTask+0x5c>
		osMessageQueueGet(breakQueueHandle,&breakPercentageReceived,NULL,250);
 80011fe:	4b8a      	ldr	r3, [pc, #552]	; (8001428 <startDataProcessTask+0x250>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	f107 0118 	add.w	r1, r7, #24
 8001206:	23fa      	movs	r3, #250	; 0xfa
 8001208:	2200      	movs	r2, #0
 800120a:	f003 f951 	bl	80044b0 <osMessageQueueGet>
		osMessageQueueGet(throttleQueueHandle,&throttlePercentageReceived,NULL,250);
 800120e:	4b87      	ldr	r3, [pc, #540]	; (800142c <startDataProcessTask+0x254>)
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	f107 0114 	add.w	r1, r7, #20
 8001216:	23fa      	movs	r3, #250	; 0xfa
 8001218:	2200      	movs	r2, #0
 800121a:	f003 f949 	bl	80044b0 <osMessageQueueGet>
		breakPercentageSum = breakPercentageSum + breakPercentageReceived;
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001222:	4413      	add	r3, r2
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
		throttlePercentageSum = throttlePercentageSum + throttlePercentageReceived;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800122a:	4413      	add	r3, r2
 800122c:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 0; i < 16; i++){
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	3301      	adds	r3, #1
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	2b0f      	cmp	r3, #15
 8001238:	dde1      	ble.n	80011fe <startDataProcessTask+0x26>
	}
	int avgBreakPercentage = breakPercentageSum/16;
 800123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123c:	2b00      	cmp	r3, #0
 800123e:	da00      	bge.n	8001242 <startDataProcessTask+0x6a>
 8001240:	330f      	adds	r3, #15
 8001242:	111b      	asrs	r3, r3, #4
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
	int avgThrottlePercentage = throttlePercentageSum/16;
 8001246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001248:	2b00      	cmp	r3, #0
 800124a:	da00      	bge.n	800124e <startDataProcessTask+0x76>
 800124c:	330f      	adds	r3, #15
 800124e:	111b      	asrs	r3, r3, #4
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
	osMessageQueueGet(gearQueueHandle,&requestedGear,NULL,250);
 8001252:	4b77      	ldr	r3, [pc, #476]	; (8001430 <startDataProcessTask+0x258>)
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	f107 0113 	add.w	r1, r7, #19
 800125a:	23fa      	movs	r3, #250	; 0xfa
 800125c:	2200      	movs	r2, #0
 800125e:	f003 f927 	bl	80044b0 <osMessageQueueGet>
	if (requestedGear == 'N'){
 8001262:	7cfb      	ldrb	r3, [r7, #19]
 8001264:	2b4e      	cmp	r3, #78	; 0x4e
 8001266:	d10a      	bne.n	800127e <startDataProcessTask+0xa6>
		desiredSpeed = desiredSpeed - 400;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800126e:	60fb      	str	r3, [r7, #12]
		if (desiredSpeed < 0) desiredSpeed = 0;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f280 80cc 	bge.w	8001410 <startDataProcessTask+0x238>
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	e0c8      	b.n	8001410 <startDataProcessTask+0x238>
	} else if (requestedGear == '1'){
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	2b31      	cmp	r3, #49	; 0x31
 8001282:	d161      	bne.n	8001348 <startDataProcessTask+0x170>
		maxSpeed = 80000;
 8001284:	4b6b      	ldr	r3, [pc, #428]	; (8001434 <startDataProcessTask+0x25c>)
 8001286:	623b      	str	r3, [r7, #32]
		if (avgBreakPercentage == 0 && avgThrottlePercentage > 0){
 8001288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128a:	2b00      	cmp	r3, #0
 800128c:	d120      	bne.n	80012d0 <startDataProcessTask+0xf8>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	2b00      	cmp	r3, #0
 8001292:	dd1d      	ble.n	80012d0 <startDataProcessTask+0xf8>
			acceleration = 1600*(avgThrottlePercentage/100.0);
 8001294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001296:	f7ff f8ad 	bl	80003f4 <__aeabi_i2d>
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b66      	ldr	r3, [pc, #408]	; (8001438 <startDataProcessTask+0x260>)
 80012a0:	f7ff fa3c 	bl	800071c <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4610      	mov	r0, r2
 80012aa:	4619      	mov	r1, r3
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	4b62      	ldr	r3, [pc, #392]	; (800143c <startDataProcessTask+0x264>)
 80012b2:	f7ff f909 	bl	80004c8 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	f7ff fb15 	bl	80008ec <__aeabi_d2iz>
 80012c2:	4603      	mov	r3, r0
 80012c4:	61fb      	str	r3, [r7, #28]
			desiredSpeed = desiredSpeed + acceleration;
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	e02f      	b.n	8001330 <startDataProcessTask+0x158>
		} else if (avgBreakPercentage > 0 && avgThrottlePercentage == 0){
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dd20      	ble.n	8001318 <startDataProcessTask+0x140>
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d11d      	bne.n	8001318 <startDataProcessTask+0x140>
			acceleration = -3200*(avgBreakPercentage/100.0);
 80012dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012de:	f7ff f889 	bl	80003f4 <__aeabi_i2d>
 80012e2:	f04f 0200 	mov.w	r2, #0
 80012e6:	4b54      	ldr	r3, [pc, #336]	; (8001438 <startDataProcessTask+0x260>)
 80012e8:	f7ff fa18 	bl	800071c <__aeabi_ddiv>
 80012ec:	4602      	mov	r2, r0
 80012ee:	460b      	mov	r3, r1
 80012f0:	4610      	mov	r0, r2
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b51      	ldr	r3, [pc, #324]	; (8001440 <startDataProcessTask+0x268>)
 80012fa:	f7ff f8e5 	bl	80004c8 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff faf1 	bl	80008ec <__aeabi_d2iz>
 800130a:	4603      	mov	r3, r0
 800130c:	61fb      	str	r3, [r7, #28]
			desiredSpeed = desiredSpeed + acceleration;
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	4413      	add	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e00b      	b.n	8001330 <startDataProcessTask+0x158>
		} else if (avgBreakPercentage > 0 && avgThrottlePercentage > 0){
 8001318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131a:	2b00      	cmp	r3, #0
 800131c:	dd08      	ble.n	8001330 <startDataProcessTask+0x158>
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	2b00      	cmp	r3, #0
 8001322:	dd05      	ble.n	8001330 <startDataProcessTask+0x158>
			acceleration = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
			desiredSpeed = desiredSpeed + acceleration;
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	4413      	add	r3, r2
 800132e:	60fb      	str	r3, [r7, #12]
		}
		if (desiredSpeed > maxSpeed) desiredSpeed = maxSpeed;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6a3a      	ldr	r2, [r7, #32]
 8001334:	429a      	cmp	r2, r3
 8001336:	da01      	bge.n	800133c <startDataProcessTask+0x164>
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	60fb      	str	r3, [r7, #12]
		if (desiredSpeed < 0) desiredSpeed = 0;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	da66      	bge.n	8001410 <startDataProcessTask+0x238>
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e063      	b.n	8001410 <startDataProcessTask+0x238>
	} else if (requestedGear == '2'){
 8001348:	7cfb      	ldrb	r3, [r7, #19]
 800134a:	2b32      	cmp	r3, #50	; 0x32
 800134c:	d160      	bne.n	8001410 <startDataProcessTask+0x238>
		maxSpeed = 200000;
 800134e:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <startDataProcessTask+0x26c>)
 8001350:	623b      	str	r3, [r7, #32]
		if (avgBreakPercentage == 0 && avgThrottlePercentage > 0){
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	2b00      	cmp	r3, #0
 8001356:	d120      	bne.n	800139a <startDataProcessTask+0x1c2>
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	2b00      	cmp	r3, #0
 800135c:	dd1d      	ble.n	800139a <startDataProcessTask+0x1c2>
			acceleration = 2400*(avgThrottlePercentage/100.0);
 800135e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001360:	f7ff f848 	bl	80003f4 <__aeabi_i2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b33      	ldr	r3, [pc, #204]	; (8001438 <startDataProcessTask+0x260>)
 800136a:	f7ff f9d7 	bl	800071c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b33      	ldr	r3, [pc, #204]	; (8001448 <startDataProcessTask+0x270>)
 800137c:	f7ff f8a4 	bl	80004c8 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f7ff fab0 	bl	80008ec <__aeabi_d2iz>
 800138c:	4603      	mov	r3, r0
 800138e:	61fb      	str	r3, [r7, #28]
			desiredSpeed = desiredSpeed + acceleration;
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	e02f      	b.n	80013fa <startDataProcessTask+0x222>
		} else if (avgBreakPercentage > 0 && avgThrottlePercentage == 0){
 800139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	dd20      	ble.n	80013e2 <startDataProcessTask+0x20a>
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d11d      	bne.n	80013e2 <startDataProcessTask+0x20a>
			acceleration = -3200*(avgBreakPercentage/100.0);
 80013a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013a8:	f7ff f824 	bl	80003f4 <__aeabi_i2d>
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <startDataProcessTask+0x260>)
 80013b2:	f7ff f9b3 	bl	800071c <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <startDataProcessTask+0x268>)
 80013c4:	f7ff f880 	bl	80004c8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fa8c 	bl	80008ec <__aeabi_d2iz>
 80013d4:	4603      	mov	r3, r0
 80013d6:	61fb      	str	r3, [r7, #28]
			desiredSpeed = desiredSpeed + acceleration;
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	e00b      	b.n	80013fa <startDataProcessTask+0x222>
		} else if (avgBreakPercentage > 0 && avgThrottlePercentage > 0){
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	dd08      	ble.n	80013fa <startDataProcessTask+0x222>
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	dd05      	ble.n	80013fa <startDataProcessTask+0x222>
			acceleration = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
			desiredSpeed = desiredSpeed + acceleration;
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
		}
		if (desiredSpeed > maxSpeed) desiredSpeed = maxSpeed;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6a3a      	ldr	r2, [r7, #32]
 80013fe:	429a      	cmp	r2, r3
 8001400:	da01      	bge.n	8001406 <startDataProcessTask+0x22e>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	60fb      	str	r3, [r7, #12]
		if (desiredSpeed < 0) desiredSpeed = 0;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	da01      	bge.n	8001410 <startDataProcessTask+0x238>
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
	}
	osMessageQueuePut(speedQueueHandle,&desiredSpeed,0,200);
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <startDataProcessTask+0x274>)
 8001412:	6818      	ldr	r0, [r3, #0]
 8001414:	f107 010c 	add.w	r1, r7, #12
 8001418:	23c8      	movs	r3, #200	; 0xc8
 800141a:	2200      	movs	r2, #0
 800141c:	f002 ffd4 	bl	80043c8 <osMessageQueuePut>
    osDelay(100);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f002 ff1d 	bl	8004260 <osDelay>
  {
 8001426:	e6e3      	b.n	80011f0 <startDataProcessTask+0x18>
 8001428:	200000e8 	.word	0x200000e8
 800142c:	200000ec 	.word	0x200000ec
 8001430:	200000f0 	.word	0x200000f0
 8001434:	00013880 	.word	0x00013880
 8001438:	40590000 	.word	0x40590000
 800143c:	40990000 	.word	0x40990000
 8001440:	c0a90000 	.word	0xc0a90000
 8001444:	00030d40 	.word	0x00030d40
 8001448:	40a2c000 	.word	0x40a2c000
 800144c:	200000f4 	.word	0x200000f4

08001450 <startOutputDispTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startOutputDispTask */
void startOutputDispTask(void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startOutputDispTask */
	LCD_init();
 8001458:	f7ff fcc0 	bl	8000ddc <LCD_init>
	set_cursor_pos(0,0);
 800145c:	2100      	movs	r1, #0
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fd5a 	bl	8000f18 <set_cursor_pos>
	write_string_LCD("Desired speed:");
 8001464:	482a      	ldr	r0, [pc, #168]	; (8001510 <startOutputDispTask+0xc0>)
 8001466:	f7ff fd82 	bl	8000f6e <write_string_LCD>
	set_cursor_pos(1,11);
 800146a:	210b      	movs	r1, #11
 800146c:	2001      	movs	r0, #1
 800146e:	f7ff fd53 	bl	8000f18 <set_cursor_pos>
	write_string_LCD("km/hr");
 8001472:	4828      	ldr	r0, [pc, #160]	; (8001514 <startOutputDispTask+0xc4>)
 8001474:	f7ff fd7b 	bl	8000f6e <write_string_LCD>
	set_cursor_pos(1,7);
 8001478:	2107      	movs	r1, #7
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fd4c 	bl	8000f18 <set_cursor_pos>
	uint32_t desiredSpeedReceived = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
	uint32_t avgDesiredSpeed;
  /* Infinite loop */
  for(;;)
  {
	uint32_t sumDesiredSpeed = 0;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 16 ; i++){
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	e00e      	b.n	80014ac <startOutputDispTask+0x5c>
		osMessageQueueGet(speedQueueHandle,&desiredSpeedReceived,NULL,250);
 800148e:	4b22      	ldr	r3, [pc, #136]	; (8001518 <startOutputDispTask+0xc8>)
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	f107 0108 	add.w	r1, r7, #8
 8001496:	23fa      	movs	r3, #250	; 0xfa
 8001498:	2200      	movs	r2, #0
 800149a:	f003 f809 	bl	80044b0 <osMessageQueueGet>
		sumDesiredSpeed = sumDesiredSpeed + desiredSpeedReceived;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	69fa      	ldr	r2, [r7, #28]
 80014a2:	4413      	add	r3, r2
 80014a4:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 16 ; i++){
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	3301      	adds	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b0f      	cmp	r3, #15
 80014b0:	dded      	ble.n	800148e <startOutputDispTask+0x3e>
	}
	avgDesiredSpeed = sumDesiredSpeed/16;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	617b      	str	r3, [r7, #20]
	uint16_t dutyCycle = avgDesiredSpeed*(65535.0/200000.0);
 80014b8:	6978      	ldr	r0, [r7, #20]
 80014ba:	f7fe ff8b 	bl	80003d4 <__aeabi_ui2d>
 80014be:	a312      	add	r3, pc, #72	; (adr r3, 8001508 <startOutputDispTask+0xb8>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f800 	bl	80004c8 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	f7ff fa34 	bl	800093c <__aeabi_d2uiz>
 80014d4:	4603      	mov	r3, r0
 80014d6:	827b      	strh	r3, [r7, #18]
	int desiredSpeedInKM = avgDesiredSpeed/1000;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <startOutputDispTask+0xcc>)
 80014dc:	fba2 2303 	umull	r2, r3, r2, r3
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, dutyCycle);
 80014e4:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <startOutputDispTask+0xd0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	8a7a      	ldrh	r2, [r7, #18]
 80014ea:	635a      	str	r2, [r3, #52]	; 0x34
	write_int_LCD(desiredSpeedInKM);
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff fd55 	bl	8000f9c <write_int_LCD>
	set_cursor_pos(1,7);
 80014f2:	2107      	movs	r1, #7
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fd0f 	bl	8000f18 <set_cursor_pos>
    osDelay(500);
 80014fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014fe:	f002 feaf 	bl	8004260 <osDelay>
  {
 8001502:	e7bf      	b.n	8001484 <startOutputDispTask+0x34>
 8001504:	f3af 8000 	nop.w
 8001508:	902de00d 	.word	0x902de00d
 800150c:	3fd4f8a0 	.word	0x3fd4f8a0
 8001510:	08006f48 	.word	0x08006f48
 8001514:	08006f58 	.word	0x08006f58
 8001518:	200000f4 	.word	0x200000f4
 800151c:	10624dd3 	.word	0x10624dd3
 8001520:	2000008c 	.word	0x2000008c

08001524 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d101      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001536:	f000 f9ed 	bl	8001914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40000400 	.word	0x40000400

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	e7fe      	b.n	8001550 <Error_Handler+0x8>
	...

08001554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800155a:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_MspInit+0x68>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a17      	ldr	r2, [pc, #92]	; (80015bc <HAL_MspInit+0x68>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_MspInit+0x68>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_MspInit+0x68>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a11      	ldr	r2, [pc, #68]	; (80015bc <HAL_MspInit+0x68>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_MspInit+0x68>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800158a:	2200      	movs	r2, #0
 800158c:	210f      	movs	r1, #15
 800158e:	f06f 0001 	mvn.w	r0, #1
 8001592:	f000 ff68 	bl	8002466 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_MspInit+0x6c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_MspInit+0x6c>)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40010000 	.word	0x40010000

080015c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_ADC_MspInit+0xbc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d122      	bne.n	800162a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 80015ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ee:	6193      	str	r3, [r2, #24]
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a20      	ldr	r2, [pc, #128]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = throttlePot_Pin;
 8001614:	2308      	movs	r3, #8
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001618:	2303      	movs	r3, #3
 800161a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(throttlePot_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	4619      	mov	r1, r3
 8001622:	4819      	ldr	r0, [pc, #100]	; (8001688 <HAL_ADC_MspInit+0xc4>)
 8001624:	f000 ff4a 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001628:	e026      	b.n	8001678 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a17      	ldr	r2, [pc, #92]	; (800168c <HAL_ADC_MspInit+0xc8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d121      	bne.n	8001678 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a0c      	ldr	r2, [pc, #48]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_ADC_MspInit+0xc0>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = breakPot_Pin;
 8001664:	2310      	movs	r3, #16
 8001666:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001668:	2303      	movs	r3, #3
 800166a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(breakPot_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_ADC_MspInit+0xc4>)
 8001674:	f000 ff22 	bl	80024bc <HAL_GPIO_Init>
}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40012400 	.word	0x40012400
 8001684:	40021000 	.word	0x40021000
 8001688:	40010800 	.word	0x40010800
 800168c:	40012800 	.word	0x40012800

08001690 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a0:	d10b      	bne.n	80016ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_TIM_PWM_MspInit+0x34>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_TIM_PWM_MspInit+0x34>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_TIM_PWM_MspInit+0x34>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e6:	d12a      	bne.n	800173e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_TIM_MspPostInit+0x80>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a16      	ldr	r2, [pc, #88]	; (8001748 <HAL_TIM_MspPostInit+0x80>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_TIM_MspPostInit+0x80>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = speedLED_Pin;
 8001700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001704:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(speedLED_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	4619      	mov	r1, r3
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <HAL_TIM_MspPostInit+0x84>)
 8001716:	f000 fed1 	bl	80024bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <HAL_TIM_MspPostInit+0x88>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	61fb      	str	r3, [r7, #28]
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001726:	61fb      	str	r3, [r7, #28]
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800172e:	61fb      	str	r3, [r7, #28]
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001736:	61fb      	str	r3, [r7, #28]
 8001738:	4a05      	ldr	r2, [pc, #20]	; (8001750 <HAL_TIM_MspPostInit+0x88>)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	40010800 	.word	0x40010800
 8001750:	40010000 	.word	0x40010000

08001754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800176a:	4b34      	ldr	r3, [pc, #208]	; (800183c <HAL_InitTick+0xe8>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	4a33      	ldr	r2, [pc, #204]	; (800183c <HAL_InitTick+0xe8>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	61d3      	str	r3, [r2, #28]
 8001776:	4b31      	ldr	r3, [pc, #196]	; (800183c <HAL_InitTick+0xe8>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001782:	f107 0210 	add.w	r2, r7, #16
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f001 fc45 	bl	800301c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	2b00      	cmp	r3, #0
 800179a:	d103      	bne.n	80017a4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800179c:	f001 fc16 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 80017a0:	6378      	str	r0, [r7, #52]	; 0x34
 80017a2:	e004      	b.n	80017ae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017a4:	f001 fc12 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 80017a8:	4603      	mov	r3, r0
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b0:	4a23      	ldr	r2, [pc, #140]	; (8001840 <HAL_InitTick+0xec>)
 80017b2:	fba2 2303 	umull	r2, r3, r2, r3
 80017b6:	0c9b      	lsrs	r3, r3, #18
 80017b8:	3b01      	subs	r3, #1
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80017bc:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_InitTick+0xf0>)
 80017be:	4a22      	ldr	r2, [pc, #136]	; (8001848 <HAL_InitTick+0xf4>)
 80017c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <HAL_InitTick+0xf0>)
 80017c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017c8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80017ca:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <HAL_InitTick+0xf0>)
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_InitTick+0xf0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_InitTick+0xf0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_InitTick+0xf0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80017e2:	4818      	ldr	r0, [pc, #96]	; (8001844 <HAL_InitTick+0xf0>)
 80017e4:	f001 fdde 	bl	80033a4 <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80017ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d11b      	bne.n	800182e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80017f6:	4813      	ldr	r0, [pc, #76]	; (8001844 <HAL_InitTick+0xf0>)
 80017f8:	f001 fe76 	bl	80034e8 <HAL_TIM_Base_Start_IT>
 80017fc:	4603      	mov	r3, r0
 80017fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001802:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001806:	2b00      	cmp	r3, #0
 8001808:	d111      	bne.n	800182e <HAL_InitTick+0xda>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800180a:	201d      	movs	r0, #29
 800180c:	f000 fe47 	bl	800249e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b0f      	cmp	r3, #15
 8001814:	d808      	bhi.n	8001828 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001816:	2200      	movs	r2, #0
 8001818:	6879      	ldr	r1, [r7, #4]
 800181a:	201d      	movs	r0, #29
 800181c:	f000 fe23 	bl	8002466 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001820:	4a0a      	ldr	r2, [pc, #40]	; (800184c <HAL_InitTick+0xf8>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	e002      	b.n	800182e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800182e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001832:	4618      	mov	r0, r3
 8001834:	3738      	adds	r7, #56	; 0x38
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	431bde83 	.word	0x431bde83
 8001844:	200000fc 	.word	0x200000fc
 8001848:	40000400 	.word	0x40000400
 800184c:	20000004 	.word	0x20000004

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <NMI_Handler+0x4>

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185a:	e7fe      	b.n	800185a <HardFault_Handler+0x4>

0800185c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001860:	e7fe      	b.n	8001860 <MemManage_Handler+0x4>

08001862 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001866:	e7fe      	b.n	8001866 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	e7fe      	b.n	800186c <UsageFault_Handler+0x4>

0800186e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
	...

0800187c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM3_IRQHandler+0x10>)
 8001882:	f001 ff75 	bl	8003770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200000fc 	.word	0x200000fc

08001890 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189e:	490d      	ldr	r1, [pc, #52]	; (80018d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b4:	4c0a      	ldr	r4, [pc, #40]	; (80018e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018c2:	f7ff ffe5 	bl	8001890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c6:	f005 fab9 	bl	8006e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ca:	f7ff f857 	bl	800097c <main>
  bx lr
 80018ce:	4770      	bx	lr
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80018d8:	080070cc 	.word	0x080070cc
  ldr r2, =_sbss
 80018dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80018e0:	20001e90 	.word	0x20001e90

080018e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC1_2_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ec:	4b08      	ldr	r3, [pc, #32]	; (8001910 <HAL_Init+0x28>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <HAL_Init+0x28>)
 80018f2:	f043 0310 	orr.w	r3, r3, #16
 80018f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018f8:	2003      	movs	r0, #3
 80018fa:	f000 fda9 	bl	8002450 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018fe:	200f      	movs	r0, #15
 8001900:	f7ff ff28 	bl	8001754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001904:	f7ff fe26 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40022000 	.word	0x40022000

08001914 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_IncTick+0x1c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_IncTick+0x20>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4413      	add	r3, r2
 8001924:	4a03      	ldr	r2, [pc, #12]	; (8001934 <HAL_IncTick+0x20>)
 8001926:	6013      	str	r3, [r2, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000008 	.word	0x20000008
 8001934:	20000144 	.word	0x20000144

08001938 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return uwTick;
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <HAL_GetTick+0x10>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000144 	.word	0x20000144

0800194c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e0be      	b.n	8001aec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fe1a 	bl	80015c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fbc5 	bl	8002120 <ADC_ConversionStop_Disable>
 8001996:	4603      	mov	r3, r0
 8001998:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	f040 8099 	bne.w	8001ada <HAL_ADC_Init+0x18e>
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f040 8095 	bne.w	8001ada <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019b8:	f023 0302 	bic.w	r3, r3, #2
 80019bc:	f043 0202 	orr.w	r2, r3, #2
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7b1b      	ldrb	r3, [r3, #12]
 80019d2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019d4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e4:	d003      	beq.n	80019ee <HAL_ADC_Init+0xa2>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_ADC_Init+0xa8>
 80019ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019f2:	e000      	b.n	80019f6 <HAL_ADC_Init+0xaa>
 80019f4:	2300      	movs	r3, #0
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7d1b      	ldrb	r3, [r3, #20]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d119      	bne.n	8001a38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7b1b      	ldrb	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d109      	bne.n	8001a20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	035a      	lsls	r2, r3, #13
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	e00b      	b.n	8001a38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	f043 0220 	orr.w	r2, r3, #32
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	4b28      	ldr	r3, [pc, #160]	; (8001af4 <HAL_ADC_Init+0x1a8>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a68:	d003      	beq.n	8001a72 <HAL_ADC_Init+0x126>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d104      	bne.n	8001a7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	051b      	lsls	r3, r3, #20
 8001a7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_ADC_Init+0x1ac>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d10b      	bne.n	8001ab8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	f023 0303 	bic.w	r3, r3, #3
 8001aae:	f043 0201 	orr.w	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ab6:	e018      	b.n	8001aea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	f023 0312 	bic.w	r3, r3, #18
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ad8:	e007      	b.n	8001aea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f043 0210 	orr.w	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	ffe1f7fd 	.word	0xffe1f7fd
 8001af8:	ff1f0efe 	.word	0xff1f0efe

08001afc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_ADC_Start+0x1a>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e098      	b.n	8001c48 <HAL_ADC_Start+0x14c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 faa4 	bl	800206c <ADC_Enable>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 8087 	bne.w	8001c3e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a41      	ldr	r2, [pc, #260]	; (8001c50 <HAL_ADC_Start+0x154>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d105      	bne.n	8001b5a <HAL_ADC_Start+0x5e>
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_ADC_Start+0x158>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d115      	bne.n	8001b86 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d026      	beq.n	8001bc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b84:	e01d      	b.n	8001bc2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2f      	ldr	r2, [pc, #188]	; (8001c54 <HAL_ADC_Start+0x158>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Start+0xaa>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_ADC_Start+0x154>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_ADC_Start+0xc6>
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_ADC_Start+0x158>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	f023 0206 	bic.w	r2, r3, #6
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bda:	e002      	b.n	8001be2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f06f 0202 	mvn.w	r2, #2
 8001bf2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001bfe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c02:	d113      	bne.n	8001c2c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_ADC_Start+0x154>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d105      	bne.n	8001c1a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001c0e:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <HAL_ADC_Start+0x158>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d108      	bne.n	8001c2c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	e00c      	b.n	8001c46 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	e003      	b.n	8001c46 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40012800 	.word	0x40012800
 8001c54:	40012400 	.word	0x40012400

08001c58 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c6e:	f7ff fe63 	bl	8001938 <HAL_GetTick>
 8001c72:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	f043 0220 	orr.w	r2, r3, #32
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e0d3      	b.n	8001e42 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d131      	bne.n	8001d0c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d12a      	bne.n	8001d0c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cb6:	e021      	b.n	8001cfc <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d01d      	beq.n	8001cfc <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <HAL_ADC_PollForConversion+0x7e>
 8001cc6:	f7ff fe37 	bl	8001938 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d212      	bcs.n	8001cfc <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10b      	bne.n	8001cfc <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0a2      	b.n	8001e42 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0d6      	beq.n	8001cb8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d0a:	e070      	b.n	8001dee <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001d0c:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_ADC_PollForConversion+0x1f4>)
 8001d0e:	681c      	ldr	r4, [r3, #0]
 8001d10:	2002      	movs	r0, #2
 8001d12:	f001 fa87 	bl	8003224 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d16:	4603      	mov	r3, r0
 8001d18:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6919      	ldr	r1, [r3, #16]
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <HAL_ADC_PollForConversion+0x1f8>)
 8001d24:	400b      	ands	r3, r1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_ADC_PollForConversion+0x104>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <HAL_ADC_PollForConversion+0x1fc>)
 8001d32:	400b      	ands	r3, r1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d111      	bne.n	8001d5c <HAL_ADC_PollForConversion+0x104>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6919      	ldr	r1, [r3, #16]
 8001d3e:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <HAL_ADC_PollForConversion+0x200>)
 8001d40:	400b      	ands	r3, r1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x100>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68d9      	ldr	r1, [r3, #12]
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_ADC_PollForConversion+0x204>)
 8001d4e:	400b      	ands	r3, r1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_ADC_PollForConversion+0x100>
 8001d54:	2314      	movs	r3, #20
 8001d56:	e020      	b.n	8001d9a <HAL_ADC_PollForConversion+0x142>
 8001d58:	2329      	movs	r3, #41	; 0x29
 8001d5a:	e01e      	b.n	8001d9a <HAL_ADC_PollForConversion+0x142>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_ADC_PollForConversion+0x200>)
 8001d64:	400b      	ands	r3, r1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_ADC_PollForConversion+0x120>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68d9      	ldr	r1, [r3, #12]
 8001d70:	4b3a      	ldr	r3, [pc, #232]	; (8001e5c <HAL_ADC_PollForConversion+0x204>)
 8001d72:	400b      	ands	r3, r1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <HAL_ADC_PollForConversion+0x13c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	4b38      	ldr	r3, [pc, #224]	; (8001e60 <HAL_ADC_PollForConversion+0x208>)
 8001d80:	400b      	ands	r3, r1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d108      	bne.n	8001d98 <HAL_ADC_PollForConversion+0x140>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68d9      	ldr	r1, [r3, #12]
 8001d8c:	4b34      	ldr	r3, [pc, #208]	; (8001e60 <HAL_ADC_PollForConversion+0x208>)
 8001d8e:	400b      	ands	r3, r1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_ADC_PollForConversion+0x140>
 8001d94:	2354      	movs	r3, #84	; 0x54
 8001d96:	e000      	b.n	8001d9a <HAL_ADC_PollForConversion+0x142>
 8001d98:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001da0:	e021      	b.n	8001de6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da8:	d01a      	beq.n	8001de0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d007      	beq.n	8001dc0 <HAL_ADC_PollForConversion+0x168>
 8001db0:	f7ff fdc2 	bl	8001938 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d20f      	bcs.n	8001de0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d90b      	bls.n	8001de0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	f043 0204 	orr.w	r2, r3, #4
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e030      	b.n	8001e42 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3301      	adds	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d8d9      	bhi.n	8001da2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f06f 0212 	mvn.w	r2, #18
 8001df6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e12:	d115      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d111      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	371c      	adds	r7, #28
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd90      	pop	{r4, r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	24924924 	.word	0x24924924
 8001e54:	00924924 	.word	0x00924924
 8001e58:	12492492 	.word	0x12492492
 8001e5c:	00492492 	.word	0x00492492
 8001e60:	00249249 	.word	0x00249249

08001e64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x20>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e0dc      	b.n	8002056 <HAL_ADC_ConfigChannel+0x1da>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b06      	cmp	r3, #6
 8001eaa:	d81c      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b05      	subs	r3, #5
 8001ebe:	221f      	movs	r2, #31
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	4019      	ands	r1, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b05      	subs	r3, #5
 8001ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee4:	e03c      	b.n	8001f60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d81c      	bhi.n	8001f28 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	3b23      	subs	r3, #35	; 0x23
 8001f00:	221f      	movs	r2, #31
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4019      	ands	r1, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	3b23      	subs	r3, #35	; 0x23
 8001f1a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	631a      	str	r2, [r3, #48]	; 0x30
 8001f26:	e01b      	b.n	8001f60 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	3b41      	subs	r3, #65	; 0x41
 8001f3a:	221f      	movs	r2, #31
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	4019      	ands	r1, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	3b41      	subs	r3, #65	; 0x41
 8001f54:	fa00 f203 	lsl.w	r2, r0, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b09      	cmp	r3, #9
 8001f66:	d91c      	bls.n	8001fa2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68d9      	ldr	r1, [r3, #12]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	3b1e      	subs	r3, #30
 8001f7a:	2207      	movs	r2, #7
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	4019      	ands	r1, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	6898      	ldr	r0, [r3, #8]
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	3b1e      	subs	r3, #30
 8001f94:	fa00 f203 	lsl.w	r2, r0, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	e019      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6919      	ldr	r1, [r3, #16]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4019      	ands	r1, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6898      	ldr	r0, [r3, #8]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d003      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fe2:	2b11      	cmp	r3, #17
 8001fe4:	d132      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d125      	bne.n	800203c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d126      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800200c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b10      	cmp	r3, #16
 8002014:	d11a      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002016:	4b13      	ldr	r3, [pc, #76]	; (8002064 <HAL_ADC_ConfigChannel+0x1e8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a13      	ldr	r2, [pc, #76]	; (8002068 <HAL_ADC_ConfigChannel+0x1ec>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	0c9a      	lsrs	r2, r3, #18
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800202c:	e002      	b.n	8002034 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	3b01      	subs	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f9      	bne.n	800202e <HAL_ADC_ConfigChannel+0x1b2>
 800203a:	e007      	b.n	800204c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	f043 0220 	orr.w	r2, r3, #32
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002054:	7bfb      	ldrb	r3, [r7, #15]
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	40012400 	.word	0x40012400
 8002064:	20000000 	.word	0x20000000
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b01      	cmp	r3, #1
 8002088:	d040      	beq.n	800210c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <ADC_Enable+0xac>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1f      	ldr	r2, [pc, #124]	; (800211c <ADC_Enable+0xb0>)
 80020a0:	fba2 2303 	umull	r2, r3, r2, r3
 80020a4:	0c9b      	lsrs	r3, r3, #18
 80020a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020a8:	e002      	b.n	80020b0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	3b01      	subs	r3, #1
 80020ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f9      	bne.n	80020aa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020b6:	f7ff fc3f 	bl	8001938 <HAL_GetTick>
 80020ba:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020bc:	e01f      	b.n	80020fe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020be:	f7ff fc3b 	bl	8001938 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d918      	bls.n	80020fe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d011      	beq.n	80020fe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e007      	b.n	800210e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d1d8      	bne.n	80020be <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000
 800211c:	431bde83 	.word	0x431bde83

08002120 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d12e      	bne.n	8002198 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800214a:	f7ff fbf5 	bl	8001938 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002150:	e01b      	b.n	800218a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002152:	f7ff fbf1 	bl	8001938 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d914      	bls.n	800218a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10d      	bne.n	800218a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e007      	b.n	800219a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d0dc      	beq.n	8002152 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_ADCEx_Calibration_Start+0x1e>
 80021be:	2302      	movs	r3, #2
 80021c0:	e095      	b.n	80022ee <HAL_ADCEx_Calibration_Start+0x14a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffa8 	bl	8002120 <ADC_ConversionStop_Disable>
 80021d0:	4603      	mov	r3, r0
 80021d2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 8084 	bne.w	80022e4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021e4:	f023 0302 	bic.w	r3, r3, #2
 80021e8:	f043 0202 	orr.w	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021f0:	4b41      	ldr	r3, [pc, #260]	; (80022f8 <HAL_ADCEx_Calibration_Start+0x154>)
 80021f2:	681c      	ldr	r4, [r3, #0]
 80021f4:	2002      	movs	r0, #2
 80021f6:	f001 f815 	bl	8003224 <HAL_RCCEx_GetPeriphCLKFreq>
 80021fa:	4603      	mov	r3, r0
 80021fc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002200:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002202:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002204:	e002      	b.n	800220c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3b01      	subs	r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff2a 	bl	800206c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0208 	orr.w	r2, r2, #8
 8002226:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002228:	f7ff fb86 	bl	8001938 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800222e:	e01b      	b.n	8002268 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002230:	f7ff fb82 	bl	8001938 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b0a      	cmp	r3, #10
 800223c:	d914      	bls.n	8002268 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	f023 0312 	bic.w	r3, r3, #18
 8002254:	f043 0210 	orr.w	r2, r3, #16
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e042      	b.n	80022ee <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1dc      	bne.n	8002230 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0204 	orr.w	r2, r2, #4
 8002284:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002286:	f7ff fb57 	bl	8001938 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800228c:	e01b      	b.n	80022c6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800228e:	f7ff fb53 	bl	8001938 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b0a      	cmp	r3, #10
 800229a:	d914      	bls.n	80022c6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00d      	beq.n	80022c6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	f023 0312 	bic.w	r3, r3, #18
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e013      	b.n	80022ee <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1dc      	bne.n	800228e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d8:	f023 0303 	bic.w	r3, r3, #3
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	371c      	adds	r7, #28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000000 	.word	0x20000000

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4906      	ldr	r1, [pc, #24]	; (8002394 <__NVIC_EnableIRQ+0x34>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7ff ff4f 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002466:	b580      	push	{r7, lr}
 8002468:	b086      	sub	sp, #24
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	60b9      	str	r1, [r7, #8]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff64 	bl	8002344 <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ffb2 	bl	80023ec <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff81 	bl	8002398 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff57 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b08b      	sub	sp, #44	; 0x2c
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024ca:	2300      	movs	r3, #0
 80024cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ce:	e169      	b.n	80027a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024d0:	2201      	movs	r2, #1
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69fa      	ldr	r2, [r7, #28]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	f040 8158 	bne.w	800279e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4a9a      	ldr	r2, [pc, #616]	; (800275c <HAL_GPIO_Init+0x2a0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d05e      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 80024f8:	4a98      	ldr	r2, [pc, #608]	; (800275c <HAL_GPIO_Init+0x2a0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d875      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 80024fe:	4a98      	ldr	r2, [pc, #608]	; (8002760 <HAL_GPIO_Init+0x2a4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d058      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 8002504:	4a96      	ldr	r2, [pc, #600]	; (8002760 <HAL_GPIO_Init+0x2a4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d86f      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 800250a:	4a96      	ldr	r2, [pc, #600]	; (8002764 <HAL_GPIO_Init+0x2a8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d052      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 8002510:	4a94      	ldr	r2, [pc, #592]	; (8002764 <HAL_GPIO_Init+0x2a8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d869      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 8002516:	4a94      	ldr	r2, [pc, #592]	; (8002768 <HAL_GPIO_Init+0x2ac>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d04c      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 800251c:	4a92      	ldr	r2, [pc, #584]	; (8002768 <HAL_GPIO_Init+0x2ac>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d863      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 8002522:	4a92      	ldr	r2, [pc, #584]	; (800276c <HAL_GPIO_Init+0x2b0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d046      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
 8002528:	4a90      	ldr	r2, [pc, #576]	; (800276c <HAL_GPIO_Init+0x2b0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d85d      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 800252e:	2b12      	cmp	r3, #18
 8002530:	d82a      	bhi.n	8002588 <HAL_GPIO_Init+0xcc>
 8002532:	2b12      	cmp	r3, #18
 8002534:	d859      	bhi.n	80025ea <HAL_GPIO_Init+0x12e>
 8002536:	a201      	add	r2, pc, #4	; (adr r2, 800253c <HAL_GPIO_Init+0x80>)
 8002538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800253c:	080025b7 	.word	0x080025b7
 8002540:	08002591 	.word	0x08002591
 8002544:	080025a3 	.word	0x080025a3
 8002548:	080025e5 	.word	0x080025e5
 800254c:	080025eb 	.word	0x080025eb
 8002550:	080025eb 	.word	0x080025eb
 8002554:	080025eb 	.word	0x080025eb
 8002558:	080025eb 	.word	0x080025eb
 800255c:	080025eb 	.word	0x080025eb
 8002560:	080025eb 	.word	0x080025eb
 8002564:	080025eb 	.word	0x080025eb
 8002568:	080025eb 	.word	0x080025eb
 800256c:	080025eb 	.word	0x080025eb
 8002570:	080025eb 	.word	0x080025eb
 8002574:	080025eb 	.word	0x080025eb
 8002578:	080025eb 	.word	0x080025eb
 800257c:	080025eb 	.word	0x080025eb
 8002580:	08002599 	.word	0x08002599
 8002584:	080025ad 	.word	0x080025ad
 8002588:	4a79      	ldr	r2, [pc, #484]	; (8002770 <HAL_GPIO_Init+0x2b4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d013      	beq.n	80025b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800258e:	e02c      	b.n	80025ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	623b      	str	r3, [r7, #32]
          break;
 8002596:	e029      	b.n	80025ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	3304      	adds	r3, #4
 800259e:	623b      	str	r3, [r7, #32]
          break;
 80025a0:	e024      	b.n	80025ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	3308      	adds	r3, #8
 80025a8:	623b      	str	r3, [r7, #32]
          break;
 80025aa:	e01f      	b.n	80025ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	330c      	adds	r3, #12
 80025b2:	623b      	str	r3, [r7, #32]
          break;
 80025b4:	e01a      	b.n	80025ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025be:	2304      	movs	r3, #4
 80025c0:	623b      	str	r3, [r7, #32]
          break;
 80025c2:	e013      	b.n	80025ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025cc:	2308      	movs	r3, #8
 80025ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	611a      	str	r2, [r3, #16]
          break;
 80025d6:	e009      	b.n	80025ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025d8:	2308      	movs	r3, #8
 80025da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	615a      	str	r2, [r3, #20]
          break;
 80025e2:	e003      	b.n	80025ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
          break;
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x130>
          break;
 80025ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2bff      	cmp	r3, #255	; 0xff
 80025f0:	d801      	bhi.n	80025f6 <HAL_GPIO_Init+0x13a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	e001      	b.n	80025fa <HAL_GPIO_Init+0x13e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3304      	adds	r3, #4
 80025fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2bff      	cmp	r3, #255	; 0xff
 8002600:	d802      	bhi.n	8002608 <HAL_GPIO_Init+0x14c>
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	e002      	b.n	800260e <HAL_GPIO_Init+0x152>
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	3b08      	subs	r3, #8
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	210f      	movs	r1, #15
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	401a      	ands	r2, r3
 8002620:	6a39      	ldr	r1, [r7, #32]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	431a      	orrs	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80b1 	beq.w	800279e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800263c:	4b4d      	ldr	r3, [pc, #308]	; (8002774 <HAL_GPIO_Init+0x2b8>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	4a4c      	ldr	r2, [pc, #304]	; (8002774 <HAL_GPIO_Init+0x2b8>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6193      	str	r3, [r2, #24]
 8002648:	4b4a      	ldr	r3, [pc, #296]	; (8002774 <HAL_GPIO_Init+0x2b8>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002654:	4a48      	ldr	r2, [pc, #288]	; (8002778 <HAL_GPIO_Init+0x2bc>)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4013      	ands	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a40      	ldr	r2, [pc, #256]	; (800277c <HAL_GPIO_Init+0x2c0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <HAL_GPIO_Init+0x1ec>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a3f      	ldr	r2, [pc, #252]	; (8002780 <HAL_GPIO_Init+0x2c4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00d      	beq.n	80026a4 <HAL_GPIO_Init+0x1e8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3e      	ldr	r2, [pc, #248]	; (8002784 <HAL_GPIO_Init+0x2c8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x1e4>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3d      	ldr	r2, [pc, #244]	; (8002788 <HAL_GPIO_Init+0x2cc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_GPIO_Init+0x1e0>
 8002698:	2303      	movs	r3, #3
 800269a:	e006      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 800269c:	2304      	movs	r3, #4
 800269e:	e004      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e002      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_GPIO_Init+0x1ee>
 80026a8:	2300      	movs	r3, #0
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	f002 0203 	and.w	r2, r2, #3
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	4093      	lsls	r3, r2
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026ba:	492f      	ldr	r1, [pc, #188]	; (8002778 <HAL_GPIO_Init+0x2bc>)
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026d4:	4b2d      	ldr	r3, [pc, #180]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	492c      	ldr	r1, [pc, #176]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
 80026e0:	e006      	b.n	80026f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026e2:	4b2a      	ldr	r3, [pc, #168]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	4928      	ldr	r1, [pc, #160]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026fc:	4b23      	ldr	r3, [pc, #140]	; (800278c <HAL_GPIO_Init+0x2d0>)
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	4922      	ldr	r1, [pc, #136]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
 8002708:	e006      	b.n	8002718 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800270a:	4b20      	ldr	r3, [pc, #128]	; (800278c <HAL_GPIO_Init+0x2d0>)
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	43db      	mvns	r3, r3
 8002712:	491e      	ldr	r1, [pc, #120]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002714:	4013      	ands	r3, r2
 8002716:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d006      	beq.n	8002732 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002724:	4b19      	ldr	r3, [pc, #100]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	4918      	ldr	r1, [pc, #96]	; (800278c <HAL_GPIO_Init+0x2d0>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	608b      	str	r3, [r1, #8]
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	43db      	mvns	r3, r3
 800273a:	4914      	ldr	r1, [pc, #80]	; (800278c <HAL_GPIO_Init+0x2d0>)
 800273c:	4013      	ands	r3, r2
 800273e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d021      	beq.n	8002790 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <HAL_GPIO_Init+0x2d0>)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	490e      	ldr	r1, [pc, #56]	; (800278c <HAL_GPIO_Init+0x2d0>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	60cb      	str	r3, [r1, #12]
 8002758:	e021      	b.n	800279e <HAL_GPIO_Init+0x2e2>
 800275a:	bf00      	nop
 800275c:	10320000 	.word	0x10320000
 8002760:	10310000 	.word	0x10310000
 8002764:	10220000 	.word	0x10220000
 8002768:	10210000 	.word	0x10210000
 800276c:	10120000 	.word	0x10120000
 8002770:	10110000 	.word	0x10110000
 8002774:	40021000 	.word	0x40021000
 8002778:	40010000 	.word	0x40010000
 800277c:	40010800 	.word	0x40010800
 8002780:	40010c00 	.word	0x40010c00
 8002784:	40011000 	.word	0x40011000
 8002788:	40011400 	.word	0x40011400
 800278c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_GPIO_Init+0x304>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	43db      	mvns	r3, r3
 8002798:	4909      	ldr	r1, [pc, #36]	; (80027c0 <HAL_GPIO_Init+0x304>)
 800279a:	4013      	ands	r3, r2
 800279c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	3301      	adds	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f47f ae8e 	bne.w	80024d0 <HAL_GPIO_Init+0x14>
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	372c      	adds	r7, #44	; 0x2c
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40010400 	.word	0x40010400

080027c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e001      	b.n	80027e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3714      	adds	r7, #20
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	807b      	strh	r3, [r7, #2]
 80027fe:	4613      	mov	r3, r2
 8002800:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002802:	787b      	ldrb	r3, [r7, #1]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002808:	887a      	ldrh	r2, [r7, #2]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800280e:	e003      	b.n	8002818 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	041a      	lsls	r2, r3, #16
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	611a      	str	r2, [r3, #16]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
	...

08002824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e272      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8087 	beq.w	8002952 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002844:	4b92      	ldr	r3, [pc, #584]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b04      	cmp	r3, #4
 800284e:	d00c      	beq.n	800286a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002850:	4b8f      	ldr	r3, [pc, #572]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b08      	cmp	r3, #8
 800285a:	d112      	bne.n	8002882 <HAL_RCC_OscConfig+0x5e>
 800285c:	4b8c      	ldr	r3, [pc, #560]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002868:	d10b      	bne.n	8002882 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286a:	4b89      	ldr	r3, [pc, #548]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d06c      	beq.n	8002950 <HAL_RCC_OscConfig+0x12c>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d168      	bne.n	8002950 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e24c      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x76>
 800288c:	4b80      	ldr	r3, [pc, #512]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a7f      	ldr	r2, [pc, #508]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	e02e      	b.n	80028f8 <HAL_RCC_OscConfig+0xd4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x98>
 80028a2:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a7a      	ldr	r2, [pc, #488]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b78      	ldr	r3, [pc, #480]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a77      	ldr	r2, [pc, #476]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e01d      	b.n	80028f8 <HAL_RCC_OscConfig+0xd4>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c4:	d10c      	bne.n	80028e0 <HAL_RCC_OscConfig+0xbc>
 80028c6:	4b72      	ldr	r3, [pc, #456]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a71      	ldr	r2, [pc, #452]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d0:	6013      	str	r3, [r2, #0]
 80028d2:	4b6f      	ldr	r3, [pc, #444]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a6e      	ldr	r2, [pc, #440]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e00b      	b.n	80028f8 <HAL_RCC_OscConfig+0xd4>
 80028e0:	4b6b      	ldr	r3, [pc, #428]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a6a      	ldr	r2, [pc, #424]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
 80028ec:	4b68      	ldr	r3, [pc, #416]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a67      	ldr	r2, [pc, #412]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d013      	beq.n	8002928 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002900:	f7ff f81a 	bl	8001938 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff f816 	bl	8001938 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	; 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e200      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291a:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0xe4>
 8002926:	e014      	b.n	8002952 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff f806 	bl	8001938 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff f802 	bl	8001938 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1ec      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	4b53      	ldr	r3, [pc, #332]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x10c>
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d063      	beq.n	8002a26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800295e:	4b4c      	ldr	r3, [pc, #304]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800296a:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x18c>
 8002976:	4b46      	ldr	r3, [pc, #280]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d116      	bne.n	80029b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d005      	beq.n	800299a <HAL_RCC_OscConfig+0x176>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d001      	beq.n	800299a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e1c0      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	4939      	ldr	r1, [pc, #228]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b8:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <HAL_RCC_OscConfig+0x270>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029be:	f7fe ffbb 	bl	8001938 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c6:	f7fe ffb7 	bl	8001938 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e1a1      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d8:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e4:	4b2a      	ldr	r3, [pc, #168]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4927      	ldr	r1, [pc, #156]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e015      	b.n	8002a26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <HAL_RCC_OscConfig+0x270>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff9a 	bl	8001938 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a08:	f7fe ff96 	bl	8001938 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e180      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a1a:	4b1d      	ldr	r3, [pc, #116]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d03a      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d019      	beq.n	8002a6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a3a:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7fe ff7a 	bl	8001938 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe ff76 	bl	8001938 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e160      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f000 fb08 	bl	800307c <RCC_Delay>
 8002a6c:	e01c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <HAL_RCC_OscConfig+0x274>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a74:	f7fe ff60 	bl	8001938 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7a:	e00f      	b.n	8002a9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe ff5c 	bl	8001938 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d908      	bls.n	8002a9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e146      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
 8002a8e:	bf00      	nop
 8002a90:	40021000 	.word	0x40021000
 8002a94:	42420000 	.word	0x42420000
 8002a98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9c:	4b92      	ldr	r3, [pc, #584]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e9      	bne.n	8002a7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a6 	beq.w	8002c02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aba:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10d      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	4a87      	ldr	r2, [pc, #540]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	61d3      	str	r3, [r2, #28]
 8002ad2:	4b85      	ldr	r3, [pc, #532]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	4b82      	ldr	r3, [pc, #520]	; (8002cec <HAL_RCC_OscConfig+0x4c8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d118      	bne.n	8002b20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aee:	4b7f      	ldr	r3, [pc, #508]	; (8002cec <HAL_RCC_OscConfig+0x4c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a7e      	ldr	r2, [pc, #504]	; (8002cec <HAL_RCC_OscConfig+0x4c8>)
 8002af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002afa:	f7fe ff1d 	bl	8001938 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b02:	f7fe ff19 	bl	8001938 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e103      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4b75      	ldr	r3, [pc, #468]	; (8002cec <HAL_RCC_OscConfig+0x4c8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0f0      	beq.n	8002b02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d106      	bne.n	8002b36 <HAL_RCC_OscConfig+0x312>
 8002b28:	4b6f      	ldr	r3, [pc, #444]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	f043 0301 	orr.w	r3, r3, #1
 8002b32:	6213      	str	r3, [r2, #32]
 8002b34:	e02d      	b.n	8002b92 <HAL_RCC_OscConfig+0x36e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x334>
 8002b3e:	4b6a      	ldr	r3, [pc, #424]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	4a69      	ldr	r2, [pc, #420]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	6213      	str	r3, [r2, #32]
 8002b4a:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	4a66      	ldr	r2, [pc, #408]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	f023 0304 	bic.w	r3, r3, #4
 8002b54:	6213      	str	r3, [r2, #32]
 8002b56:	e01c      	b.n	8002b92 <HAL_RCC_OscConfig+0x36e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b05      	cmp	r3, #5
 8002b5e:	d10c      	bne.n	8002b7a <HAL_RCC_OscConfig+0x356>
 8002b60:	4b61      	ldr	r3, [pc, #388]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a60      	ldr	r2, [pc, #384]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	f043 0304 	orr.w	r3, r3, #4
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	4b5e      	ldr	r3, [pc, #376]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4a5d      	ldr	r2, [pc, #372]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6213      	str	r3, [r2, #32]
 8002b78:	e00b      	b.n	8002b92 <HAL_RCC_OscConfig+0x36e>
 8002b7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a5a      	ldr	r2, [pc, #360]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6213      	str	r3, [r2, #32]
 8002b86:	4b58      	ldr	r3, [pc, #352]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d015      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fe fecd 	bl	8001938 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fe fec9 	bl	8001938 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0b1      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb8:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0ee      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x37e>
 8002bc4:	e014      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe feb7 	bl	8001938 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bcc:	e00a      	b.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bce:	f7fe feb3 	bl	8001938 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e09b      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be4:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ee      	bne.n	8002bce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bf0:	7dfb      	ldrb	r3, [r7, #23]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d105      	bne.n	8002c02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf6:	4b3c      	ldr	r3, [pc, #240]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	4a3b      	ldr	r2, [pc, #236]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8087 	beq.w	8002d1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d061      	beq.n	8002cdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d146      	bne.n	8002cae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c20:	4b33      	ldr	r3, [pc, #204]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c26:	f7fe fe87 	bl	8001938 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2e:	f7fe fe83 	bl	8001938 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e06d      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c40:	4b29      	ldr	r3, [pc, #164]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f0      	bne.n	8002c2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c54:	d108      	bne.n	8002c68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c56:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	4921      	ldr	r1, [pc, #132]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c68:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a19      	ldr	r1, [r3, #32]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	491b      	ldr	r1, [pc, #108]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe fe57 	bl	8001938 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe fe53 	bl	8001938 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e03d      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x46a>
 8002cac:	e035      	b.n	8002d1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <HAL_RCC_OscConfig+0x4cc>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fe40 	bl	8001938 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fe3c 	bl	8001938 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e026      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_OscConfig+0x4c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x498>
 8002cda:	e01e      	b.n	8002d1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e019      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_OscConfig+0x500>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000

08002d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e0d0      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d910      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d4a:	4b67      	ldr	r3, [pc, #412]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 0207 	bic.w	r2, r3, #7
 8002d52:	4965      	ldr	r1, [pc, #404]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d5a:	4b63      	ldr	r3, [pc, #396]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0b8      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d020      	beq.n	8002dba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a58      	ldr	r2, [pc, #352]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d9c:	4b53      	ldr	r3, [pc, #332]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a52      	ldr	r2, [pc, #328]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002da2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002da6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da8:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	494d      	ldr	r1, [pc, #308]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d040      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	4b47      	ldr	r3, [pc, #284]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d115      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e07f      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e073      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e06b      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4936      	ldr	r1, [pc, #216]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e18:	f7fe fd8e 	bl	8001938 <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e20:	f7fe fd8a 	bl	8001938 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e053      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 020c 	and.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1eb      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e48:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d210      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 0207 	bic.w	r2, r3, #7
 8002e5e:	4922      	ldr	r1, [pc, #136]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e66:	4b20      	ldr	r3, [pc, #128]	; (8002ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d001      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e032      	b.n	8002ede <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d008      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4916      	ldr	r1, [pc, #88]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0308 	and.w	r3, r3, #8
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ea2:	4b12      	ldr	r3, [pc, #72]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	490e      	ldr	r1, [pc, #56]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eb6:	f000 f821 	bl	8002efc <HAL_RCC_GetSysClockFreq>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	490a      	ldr	r1, [pc, #40]	; (8002ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	5ccb      	ldrb	r3, [r1, r3]
 8002eca:	fa22 f303 	lsr.w	r3, r2, r3
 8002ece:	4a09      	ldr	r2, [pc, #36]	; (8002ef4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ed2:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fc3c 	bl	8001754 <HAL_InitTick>

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3710      	adds	r7, #16
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	080070ac 	.word	0x080070ac
 8002ef4:	20000000 	.word	0x20000000
 8002ef8:	20000004 	.word	0x20000004

08002efc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002efc:	b490      	push	{r4, r7}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f02:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f04:	1d3c      	adds	r4, r7, #4
 8002f06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f0c:	f240 2301 	movw	r3, #513	; 0x201
 8002f10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d002      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x40>
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x46>
 8002f3a:	e02b      	b.n	8002f94 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f3e:	623b      	str	r3, [r7, #32]
      break;
 8002f40:	e02b      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	0c9b      	lsrs	r3, r3, #18
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	3328      	adds	r3, #40	; 0x28
 8002f4c:	443b      	add	r3, r7
 8002f4e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f52:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d012      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	0c5b      	lsrs	r3, r3, #17
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	3328      	adds	r3, #40	; 0x28
 8002f6a:	443b      	add	r3, r7
 8002f6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	4a0e      	ldr	r2, [pc, #56]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f76:	fb03 f202 	mul.w	r2, r3, r2
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
 8002f82:	e004      	b.n	8002f8e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4a0b      	ldr	r2, [pc, #44]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	623b      	str	r3, [r7, #32]
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f96:	623b      	str	r3, [r7, #32]
      break;
 8002f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3728      	adds	r7, #40	; 0x28
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc90      	pop	{r4, r7}
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	08006f60 	.word	0x08006f60
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	007a1200 	.word	0x007a1200
 8002fb4:	003d0900 	.word	0x003d0900

08002fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bc80      	pop	{r7}
 8002fc6:	4770      	bx	lr
 8002fc8:	20000000 	.word	0x20000000

08002fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fd0:	f7ff fff2 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	080070bc 	.word	0x080070bc

08002ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ff8:	f7ff ffde 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	0adb      	lsrs	r3, r3, #11
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	4903      	ldr	r1, [pc, #12]	; (8003018 <HAL_RCC_GetPCLK2Freq+0x24>)
 800300a:	5ccb      	ldrb	r3, [r1, r3]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003010:	4618      	mov	r0, r3
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40021000 	.word	0x40021000
 8003018:	080070bc 	.word	0x080070bc

0800301c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	220f      	movs	r2, #15
 800302a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_RCC_GetClockConfig+0x58>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0203 	and.w	r2, r3, #3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_RCC_GetClockConfig+0x58>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_GetClockConfig+0x58>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003050:	4b08      	ldr	r3, [pc, #32]	; (8003074 <HAL_RCC_GetClockConfig+0x58>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800305e:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_RCC_GetClockConfig+0x5c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0207 	and.w	r2, r3, #7
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	40021000 	.word	0x40021000
 8003078:	40022000 	.word	0x40022000

0800307c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <RCC_Delay+0x34>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <RCC_Delay+0x38>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0a5b      	lsrs	r3, r3, #9
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003098:	bf00      	nop
  }
  while (Delay --);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	60fa      	str	r2, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f9      	bne.n	8003098 <RCC_Delay+0x1c>
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	20000000 	.word	0x20000000
 80030b4:	10624dd3 	.word	0x10624dd3

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d07d      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	4b4c      	ldr	r3, [pc, #304]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	61d3      	str	r3, [r2, #28]
 80030f0:	4b49      	ldr	r3, [pc, #292]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d118      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a42      	ldr	r2, [pc, #264]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003118:	f7fe fc0e 	bl	8001938 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	e008      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003120:	f7fe fc0a 	bl	8001938 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e06d      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b3a      	ldr	r3, [pc, #232]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d02e      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d027      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315c:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003164:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800316c:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003172:	4a29      	ldr	r2, [pc, #164]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d014      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe fbd9 	bl	8001938 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe fbd5 	bl	8001938 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e036      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4917      	ldr	r1, [pc, #92]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4a13      	ldr	r2, [pc, #76]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	490b      	ldr	r1, [pc, #44]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4904      	ldr	r1, [pc, #16]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
 8003220:	42420440 	.word	0x42420440

08003224 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b08d      	sub	sp, #52	; 0x34
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800322c:	4b58      	ldr	r3, [pc, #352]	; (8003390 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800322e:	f107 040c 	add.w	r4, r7, #12
 8003232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003238:	f240 2301 	movw	r3, #513	; 0x201
 800323c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
 8003242:	2300      	movs	r3, #0
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003246:	2300      	movs	r3, #0
 8003248:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	2300      	movs	r3, #0
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b10      	cmp	r3, #16
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b10      	cmp	r3, #16
 800325c:	f200 808e 	bhi.w	800337c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d049      	beq.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d079      	beq.n	8003360 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800326c:	e086      	b.n	800337c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800326e:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003274:	4b47      	ldr	r3, [pc, #284]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d07f      	beq.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	0c9b      	lsrs	r3, r3, #18
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	3330      	adds	r3, #48	; 0x30
 800328a:	443b      	add	r3, r7
 800328c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003290:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d017      	beq.n	80032cc <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800329c:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c5b      	lsrs	r3, r3, #17
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	3330      	adds	r3, #48	; 0x30
 80032a8:	443b      	add	r3, r7
 80032aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032ae:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00d      	beq.n	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80032ba:	4a37      	ldr	r2, [pc, #220]	; (8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ca:	e004      	b.n	80032d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	4a33      	ldr	r2, [pc, #204]	; (800339c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80032d6:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032e2:	d102      	bne.n	80032ea <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032e8:	e04a      	b.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4a2c      	ldr	r2, [pc, #176]	; (80033a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80032f8:	e042      	b.n	8003380 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800330a:	d108      	bne.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
 800331c:	e01f      	b.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003328:	d109      	bne.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003336:	f649 4340 	movw	r3, #40000	; 0x9c40
 800333a:	62bb      	str	r3, [r7, #40]	; 0x28
 800333c:	e00f      	b.n	800335e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003344:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003348:	d11c      	bne.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d016      	beq.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003356:	f24f 4324 	movw	r3, #62500	; 0xf424
 800335a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800335c:	e012      	b.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800335e:	e011      	b.n	8003384 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003360:	f7ff fe48 	bl	8002ff4 <HAL_RCC_GetPCLK2Freq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0b9b      	lsrs	r3, r3, #14
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	3301      	adds	r3, #1
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800337c:	bf00      	nop
 800337e:	e002      	b.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003384:	bf00      	nop
    }
  }
  return (frequency);
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003388:	4618      	mov	r0, r3
 800338a:	3734      	adds	r7, #52	; 0x34
 800338c:	46bd      	mov	sp, r7
 800338e:	bd90      	pop	{r4, r7, pc}
 8003390:	08006f70 	.word	0x08006f70
 8003394:	40021000 	.word	0x40021000
 8003398:	007a1200 	.word	0x007a1200
 800339c:	003d0900 	.word	0x003d0900
 80033a0:	aaaaaaab 	.word	0xaaaaaaab

080033a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e041      	b.n	800343a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f839 	bl	8003442 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f000 fbae 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}

08003442 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d001      	beq.n	800346c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e032      	b.n	80034d2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_TIM_Base_Start+0x88>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00e      	beq.n	800349c <HAL_TIM_Base_Start+0x48>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003486:	d009      	beq.n	800349c <HAL_TIM_Base_Start+0x48>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <HAL_TIM_Base_Start+0x8c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_TIM_Base_Start+0x48>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_TIM_Base_Start+0x90>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d111      	bne.n	80034c0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d010      	beq.n	80034d0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	e007      	b.n	80034d0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40000400 	.word	0x40000400
 80034e4:	40000800 	.word	0x40000800

080034e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e03a      	b.n	8003576 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_TIM_Base_Start_IT+0x98>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00e      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352a:	d009      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <HAL_TIM_Base_Start_IT+0x9c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d004      	beq.n	8003540 <HAL_TIM_Base_Start_IT+0x58>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <HAL_TIM_Base_Start_IT+0xa0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2b06      	cmp	r3, #6
 8003550:	d010      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0201 	orr.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003562:	e007      	b.n	8003574 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr
 8003580:	40012c00 	.word	0x40012c00
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800

0800358c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e041      	b.n	8003622 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d106      	bne.n	80035b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7fe f86c 	bl	8001690 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 faba 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_TIM_PWM_Start+0x24>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e022      	b.n	8003696 <HAL_TIM_PWM_Start+0x6a>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b04      	cmp	r3, #4
 8003654:	d109      	bne.n	800366a <HAL_TIM_PWM_Start+0x3e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	bf14      	ite	ne
 8003662:	2301      	movne	r3, #1
 8003664:	2300      	moveq	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	e015      	b.n	8003696 <HAL_TIM_PWM_Start+0x6a>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d109      	bne.n	8003684 <HAL_TIM_PWM_Start+0x58>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	bf14      	ite	ne
 800367c:	2301      	movne	r3, #1
 800367e:	2300      	moveq	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e008      	b.n	8003696 <HAL_TIM_PWM_Start+0x6a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e05e      	b.n	800375c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <HAL_TIM_PWM_Start+0x82>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ac:	e013      	b.n	80036d6 <HAL_TIM_PWM_Start+0xaa>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0x92>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	e00b      	b.n	80036d6 <HAL_TIM_PWM_Start+0xaa>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0xa2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036cc:	e003      	b.n	80036d6 <HAL_TIM_PWM_Start+0xaa>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fc1a 	bl	8003f18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1e      	ldr	r2, [pc, #120]	; (8003764 <HAL_TIM_PWM_Start+0x138>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d107      	bne.n	80036fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_TIM_PWM_Start+0x138>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_TIM_PWM_Start+0xfa>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003710:	d009      	beq.n	8003726 <HAL_TIM_PWM_Start+0xfa>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a14      	ldr	r2, [pc, #80]	; (8003768 <HAL_TIM_PWM_Start+0x13c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_TIM_PWM_Start+0xfa>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a12      	ldr	r2, [pc, #72]	; (800376c <HAL_TIM_PWM_Start+0x140>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d111      	bne.n	800374a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b06      	cmp	r3, #6
 8003736:	d010      	beq.n	800375a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003748:	e007      	b.n	800375a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f042 0201 	orr.w	r2, r2, #1
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40000400 	.word	0x40000400
 800376c:	40000800 	.word	0x40000800

08003770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b02      	cmp	r3, #2
 8003784:	d122      	bne.n	80037cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b02      	cmp	r3, #2
 8003792:	d11b      	bne.n	80037cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f06f 0202 	mvn.w	r2, #2
 800379c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9ab 	bl	8003b0e <HAL_TIM_IC_CaptureCallback>
 80037b8:	e005      	b.n	80037c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f99e 	bl	8003afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f9ad 	bl	8003b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d122      	bne.n	8003820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d11b      	bne.n	8003820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f06f 0204 	mvn.w	r2, #4
 80037f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2202      	movs	r2, #2
 80037f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f981 	bl	8003b0e <HAL_TIM_IC_CaptureCallback>
 800380c:	e005      	b.n	800381a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f974 	bl	8003afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f983 	bl	8003b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b08      	cmp	r3, #8
 800382c:	d122      	bne.n	8003874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d11b      	bne.n	8003874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0208 	mvn.w	r2, #8
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f957 	bl	8003b0e <HAL_TIM_IC_CaptureCallback>
 8003860:	e005      	b.n	800386e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f94a 	bl	8003afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f959 	bl	8003b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b10      	cmp	r3, #16
 8003880:	d122      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b10      	cmp	r3, #16
 800388e:	d11b      	bne.n	80038c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0210 	mvn.w	r2, #16
 8003898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2208      	movs	r2, #8
 800389e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f92d 	bl	8003b0e <HAL_TIM_IC_CaptureCallback>
 80038b4:	e005      	b.n	80038c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 f920 	bl	8003afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f92f 	bl	8003b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d10e      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d107      	bne.n	80038f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0201 	mvn.w	r2, #1
 80038ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fe18 	bl	8001524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b80      	cmp	r3, #128	; 0x80
 8003900:	d10e      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d107      	bne.n	8003920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fb87 	bl	800402e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d10e      	bne.n	800394c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b40      	cmp	r3, #64	; 0x40
 800393a:	d107      	bne.n	800394c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8f3 	bl	8003b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	2b20      	cmp	r3, #32
 8003958:	d10e      	bne.n	8003978 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b20      	cmp	r3, #32
 8003966:	d107      	bne.n	8003978 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0220 	mvn.w	r2, #32
 8003970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fb52 	bl	800401c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003996:	2302      	movs	r3, #2
 8003998:	e0ac      	b.n	8003af4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b0c      	cmp	r3, #12
 80039a6:	f200 809f 	bhi.w	8003ae8 <HAL_TIM_PWM_ConfigChannel+0x168>
 80039aa:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b0:	080039e5 	.word	0x080039e5
 80039b4:	08003ae9 	.word	0x08003ae9
 80039b8:	08003ae9 	.word	0x08003ae9
 80039bc:	08003ae9 	.word	0x08003ae9
 80039c0:	08003a25 	.word	0x08003a25
 80039c4:	08003ae9 	.word	0x08003ae9
 80039c8:	08003ae9 	.word	0x08003ae9
 80039cc:	08003ae9 	.word	0x08003ae9
 80039d0:	08003a67 	.word	0x08003a67
 80039d4:	08003ae9 	.word	0x08003ae9
 80039d8:	08003ae9 	.word	0x08003ae9
 80039dc:	08003ae9 	.word	0x08003ae9
 80039e0:	08003aa7 	.word	0x08003aa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f90c 	bl	8003c08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0208 	orr.w	r2, r2, #8
 80039fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0204 	bic.w	r2, r2, #4
 8003a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6999      	ldr	r1, [r3, #24]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	619a      	str	r2, [r3, #24]
      break;
 8003a22:	e062      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68b9      	ldr	r1, [r7, #8]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f952 	bl	8003cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6999      	ldr	r1, [r3, #24]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	021a      	lsls	r2, r3, #8
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	619a      	str	r2, [r3, #24]
      break;
 8003a64:	e041      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f99b 	bl	8003da8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0208 	orr.w	r2, r2, #8
 8003a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0204 	bic.w	r2, r2, #4
 8003a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69d9      	ldr	r1, [r3, #28]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	61da      	str	r2, [r3, #28]
      break;
 8003aa4:	e021      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 f9e5 	bl	8003e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69d9      	ldr	r1, [r3, #28]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	021a      	lsls	r2, r3, #8
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	61da      	str	r2, [r3, #28]
      break;
 8003ae6:	e000      	b.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003ae8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bc80      	pop	{r7}
 8003b0c:	4770      	bx	lr

08003b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <TIM_Base_SetConfig+0xb8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_Base_SetConfig+0x30>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b62:	d007      	beq.n	8003b74 <TIM_Base_SetConfig+0x30>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a26      	ldr	r2, [pc, #152]	; (8003c00 <TIM_Base_SetConfig+0xbc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0x30>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a25      	ldr	r2, [pc, #148]	; (8003c04 <TIM_Base_SetConfig+0xc0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d108      	bne.n	8003b86 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <TIM_Base_SetConfig+0xb8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <TIM_Base_SetConfig+0x62>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0x62>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <TIM_Base_SetConfig+0xbc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0x62>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <TIM_Base_SetConfig+0xc0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a07      	ldr	r2, [pc, #28]	; (8003bfc <TIM_Base_SetConfig+0xb8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d103      	bne.n	8003bec <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	615a      	str	r2, [r3, #20]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800

08003c08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0201 	bic.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 0302 	bic.w	r3, r3, #2
 8003c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <TIM_OC1_SetConfig+0xc8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10c      	bne.n	8003c7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0308 	bic.w	r3, r3, #8
 8003c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <TIM_OC1_SetConfig+0xc8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d111      	bne.n	8003caa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	621a      	str	r2, [r3, #32]
}
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40012c00 	.word	0x40012c00

08003cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0210 	bic.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f023 0320 	bic.w	r3, r3, #32
 8003d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a1d      	ldr	r2, [pc, #116]	; (8003da4 <TIM_OC2_SetConfig+0xd0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d10d      	bne.n	8003d50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a14      	ldr	r2, [pc, #80]	; (8003da4 <TIM_OC2_SetConfig+0xd0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d113      	bne.n	8003d80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	621a      	str	r2, [r3, #32]
}
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr
 8003da4:	40012c00 	.word	0x40012c00

08003da8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0303 	bic.w	r3, r3, #3
 8003dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	021b      	lsls	r3, r3, #8
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a1d      	ldr	r2, [pc, #116]	; (8003e78 <TIM_OC3_SetConfig+0xd0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d10d      	bne.n	8003e22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <TIM_OC3_SetConfig+0xd0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d113      	bne.n	8003e52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bc80      	pop	{r7}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40012c00 	.word	0x40012c00

08003e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	031b      	lsls	r3, r3, #12
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a0f      	ldr	r2, [pc, #60]	; (8003f14 <TIM_OC4_SetConfig+0x98>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d109      	bne.n	8003ef0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	019b      	lsls	r3, r3, #6
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	621a      	str	r2, [r3, #32]
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc80      	pop	{r7}
 8003f12:	4770      	bx	lr
 8003f14:	40012c00 	.word	0x40012c00

08003f18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a1a      	ldr	r2, [r3, #32]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1a      	ldr	r2, [r3, #32]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e046      	b.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a16      	ldr	r2, [pc, #88]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00e      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc4:	d009      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d004      	beq.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a10      	ldr	r2, [pc, #64]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	40012c00 	.word	0x40012c00
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800

0800401c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bc80      	pop	{r7}
 800402c:	4770      	bx	lr

0800402e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr

08004040 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004046:	f3ef 8305 	mrs	r3, IPSR
 800404a:	60bb      	str	r3, [r7, #8]
  return(result);
 800404c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10f      	bne.n	8004072 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004052:	f3ef 8310 	mrs	r3, PRIMASK
 8004056:	607b      	str	r3, [r7, #4]
  return(result);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <osKernelInitialize+0x32>
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <osKernelInitialize+0x60>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d109      	bne.n	800407a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004066:	f3ef 8311 	mrs	r3, BASEPRI
 800406a:	603b      	str	r3, [r7, #0]
  return(result);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004072:	f06f 0305 	mvn.w	r3, #5
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e00c      	b.n	8004094 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800407a:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <osKernelInitialize+0x60>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <osKernelInitialize+0x60>)
 8004084:	2201      	movs	r2, #1
 8004086:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e002      	b.n	8004094 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800408e:	f04f 33ff 	mov.w	r3, #4294967295
 8004092:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004094:	68fb      	ldr	r3, [r7, #12]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	20000148 	.word	0x20000148

080040a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040aa:	f3ef 8305 	mrs	r3, IPSR
 80040ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80040b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10f      	bne.n	80040d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b6:	f3ef 8310 	mrs	r3, PRIMASK
 80040ba:	607b      	str	r3, [r7, #4]
  return(result);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <osKernelStart+0x32>
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <osKernelStart+0x64>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d109      	bne.n	80040de <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040ca:	f3ef 8311 	mrs	r3, BASEPRI
 80040ce:	603b      	str	r3, [r7, #0]
  return(result);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <osKernelStart+0x3a>
    stat = osErrorISR;
 80040d6:	f06f 0305 	mvn.w	r3, #5
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	e00e      	b.n	80040fc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <osKernelStart+0x64>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d107      	bne.n	80040f6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80040e6:	4b08      	ldr	r3, [pc, #32]	; (8004108 <osKernelStart+0x64>)
 80040e8:	2202      	movs	r2, #2
 80040ea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80040ec:	f001 faa2 	bl	8005634 <vTaskStartScheduler>
      stat = osOK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e002      	b.n	80040fc <osKernelStart+0x58>
    } else {
      stat = osError;
 80040f6:	f04f 33ff 	mov.w	r3, #4294967295
 80040fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000148 	.word	0x20000148

0800410c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b092      	sub	sp, #72	; 0x48
 8004110:	af04      	add	r7, sp, #16
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800411c:	f3ef 8305 	mrs	r3, IPSR
 8004120:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004124:	2b00      	cmp	r3, #0
 8004126:	f040 8094 	bne.w	8004252 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412a:	f3ef 8310 	mrs	r3, PRIMASK
 800412e:	623b      	str	r3, [r7, #32]
  return(result);
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2b00      	cmp	r3, #0
 8004134:	f040 808d 	bne.w	8004252 <osThreadNew+0x146>
 8004138:	4b48      	ldr	r3, [pc, #288]	; (800425c <osThreadNew+0x150>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d106      	bne.n	800414e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004140:	f3ef 8311 	mrs	r3, BASEPRI
 8004144:	61fb      	str	r3, [r7, #28]
  return(result);
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f040 8082 	bne.w	8004252 <osThreadNew+0x146>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d07e      	beq.n	8004252 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004154:	2380      	movs	r3, #128	; 0x80
 8004156:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004158:	2318      	movs	r3, #24
 800415a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800415c:	2300      	movs	r3, #0
 800415e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004160:	f107 031b 	add.w	r3, r7, #27
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004166:	f04f 33ff 	mov.w	r3, #4294967295
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d045      	beq.n	80041fe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <osThreadNew+0x74>
        name = attr->name;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <osThreadNew+0x9a>
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	2b38      	cmp	r3, #56	; 0x38
 8004198:	d805      	bhi.n	80041a6 <osThreadNew+0x9a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <osThreadNew+0x9e>
        return (NULL);
 80041a6:	2300      	movs	r3, #0
 80041a8:	e054      	b.n	8004254 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00e      	beq.n	80041e0 <osThreadNew+0xd4>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	2b5b      	cmp	r3, #91	; 0x5b
 80041c8:	d90a      	bls.n	80041e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d006      	beq.n	80041e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <osThreadNew+0xd4>
        mem = 1;
 80041da:	2301      	movs	r3, #1
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041de:	e010      	b.n	8004202 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10c      	bne.n	8004202 <osThreadNew+0xf6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d108      	bne.n	8004202 <osThreadNew+0xf6>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d104      	bne.n	8004202 <osThreadNew+0xf6>
          mem = 0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80041fc:	e001      	b.n	8004202 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80041fe:	2300      	movs	r3, #0
 8004200:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004204:	2b01      	cmp	r3, #1
 8004206:	d110      	bne.n	800422a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004210:	9202      	str	r2, [sp, #8]
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f001 f83c 	bl	800529c <xTaskCreateStatic>
 8004224:	4603      	mov	r3, r0
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e013      	b.n	8004252 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d110      	bne.n	8004252 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004232:	b29a      	uxth	r2, r3
 8004234:	f107 0314 	add.w	r3, r7, #20
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f001 f886 	bl	8005354 <xTaskCreate>
 8004248:	4603      	mov	r3, r0
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <osThreadNew+0x146>
          hTask = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004252:	697b      	ldr	r3, [r7, #20]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3738      	adds	r7, #56	; 0x38
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000148 	.word	0x20000148

08004260 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004268:	f3ef 8305 	mrs	r3, IPSR
 800426c:	613b      	str	r3, [r7, #16]
  return(result);
 800426e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004270:	2b00      	cmp	r3, #0
 8004272:	d10f      	bne.n	8004294 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8310 	mrs	r3, PRIMASK
 8004278:	60fb      	str	r3, [r7, #12]
  return(result);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d109      	bne.n	8004294 <osDelay+0x34>
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <osDelay+0x58>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d109      	bne.n	800429c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004288:	f3ef 8311 	mrs	r3, BASEPRI
 800428c:	60bb      	str	r3, [r7, #8]
  return(result);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <osDelay+0x3c>
    stat = osErrorISR;
 8004294:	f06f 0305 	mvn.w	r3, #5
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	e007      	b.n	80042ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f001 f990 	bl	80055cc <vTaskDelay>
    }
  }

  return (stat);
 80042ac:	697b      	ldr	r3, [r7, #20]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000148 	.word	0x20000148

080042bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08c      	sub	sp, #48	; 0x30
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042cc:	f3ef 8305 	mrs	r3, IPSR
 80042d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80042d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d16f      	bne.n	80043b8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d8:	f3ef 8310 	mrs	r3, PRIMASK
 80042dc:	617b      	str	r3, [r7, #20]
  return(result);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d169      	bne.n	80043b8 <osMessageQueueNew+0xfc>
 80042e4:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <osMessageQueueNew+0x108>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d105      	bne.n	80042f8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042ec:	f3ef 8311 	mrs	r3, BASEPRI
 80042f0:	613b      	str	r3, [r7, #16]
  return(result);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d15f      	bne.n	80043b8 <osMessageQueueNew+0xfc>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d05c      	beq.n	80043b8 <osMessageQueueNew+0xfc>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d059      	beq.n	80043b8 <osMessageQueueNew+0xfc>
    mem = -1;
 8004304:	f04f 33ff 	mov.w	r3, #4294967295
 8004308:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d029      	beq.n	8004364 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <osMessageQueueNew+0x82>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b4f      	cmp	r3, #79	; 0x4f
 800431e:	d90e      	bls.n	800433e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <osMessageQueueNew+0x82>
        mem = 1;
 8004338:	2301      	movs	r3, #1
 800433a:	623b      	str	r3, [r7, #32]
 800433c:	e014      	b.n	8004368 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d110      	bne.n	8004368 <osMessageQueueNew+0xac>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10c      	bne.n	8004368 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d104      	bne.n	8004368 <osMessageQueueNew+0xac>
          mem = 0;
 800435e:	2300      	movs	r3, #0
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	e001      	b.n	8004368 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d10b      	bne.n	8004386 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2100      	movs	r1, #0
 8004378:	9100      	str	r1, [sp, #0]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fa53 	bl	8004828 <xQueueGenericCreateStatic>
 8004382:	6278      	str	r0, [r7, #36]	; 0x24
 8004384:	e008      	b.n	8004398 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800438c:	2200      	movs	r2, #0
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fac0 	bl	8004916 <xQueueGenericCreate>
 8004396:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00c      	beq.n	80043b8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <osMessageQueueNew+0xf0>
        name = attr->name;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	e001      	b.n	80043b0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80043b0:	69f9      	ldr	r1, [r7, #28]
 80043b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043b4:	f000 ff16 	bl	80051e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3728      	adds	r7, #40	; 0x28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000148 	.word	0x20000148

080043c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08a      	sub	sp, #40	; 0x28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80043dc:	2300      	movs	r3, #0
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e0:	f3ef 8305 	mrs	r3, IPSR
 80043e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80043e6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10f      	bne.n	800440c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ec:	f3ef 8310 	mrs	r3, PRIMASK
 80043f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d109      	bne.n	800440c <osMessageQueuePut+0x44>
 80043f8:	4b2b      	ldr	r3, [pc, #172]	; (80044a8 <osMessageQueuePut+0xe0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d12e      	bne.n	800445e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004400:	f3ef 8311 	mrs	r3, BASEPRI
 8004404:	617b      	str	r3, [r7, #20]
  return(result);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d028      	beq.n	800445e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <osMessageQueuePut+0x56>
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <osMessageQueuePut+0x56>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800441e:	f06f 0303 	mvn.w	r3, #3
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004424:	e039      	b.n	800449a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800442a:	f107 0210 	add.w	r2, r7, #16
 800442e:	2300      	movs	r3, #0
 8004430:	68b9      	ldr	r1, [r7, #8]
 8004432:	6a38      	ldr	r0, [r7, #32]
 8004434:	f000 fbce 	bl	8004bd4 <xQueueGenericSendFromISR>
 8004438:	4603      	mov	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d003      	beq.n	8004446 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800443e:	f06f 0302 	mvn.w	r3, #2
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004444:	e029      	b.n	800449a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d026      	beq.n	800449a <osMessageQueuePut+0xd2>
 800444c:	4b17      	ldr	r3, [pc, #92]	; (80044ac <osMessageQueuePut+0xe4>)
 800444e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800445c:	e01d      	b.n	800449a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <osMessageQueuePut+0xa2>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800446a:	f06f 0303 	mvn.w	r3, #3
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
 8004470:	e014      	b.n	800449c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004472:	2300      	movs	r3, #0
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	6a38      	ldr	r0, [r7, #32]
 800447a:	f000 faad 	bl	80049d8 <xQueueGenericSend>
 800447e:	4603      	mov	r3, r0
 8004480:	2b01      	cmp	r3, #1
 8004482:	d00b      	beq.n	800449c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800448a:	f06f 0301 	mvn.w	r3, #1
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
 8004490:	e004      	b.n	800449c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004492:	f06f 0302 	mvn.w	r3, #2
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
 8004498:	e000      	b.n	800449c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800449a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3728      	adds	r7, #40	; 0x28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000148 	.word	0x20000148
 80044ac:	e000ed04 	.word	0xe000ed04

080044b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08a      	sub	sp, #40	; 0x28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c6:	f3ef 8305 	mrs	r3, IPSR
 80044ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80044cc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10f      	bne.n	80044f2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d2:	f3ef 8310 	mrs	r3, PRIMASK
 80044d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d109      	bne.n	80044f2 <osMessageQueueGet+0x42>
 80044de:	4b2b      	ldr	r3, [pc, #172]	; (800458c <osMessageQueueGet+0xdc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d12e      	bne.n	8004544 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044e6:	f3ef 8311 	mrs	r3, BASEPRI
 80044ea:	617b      	str	r3, [r7, #20]
  return(result);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d028      	beq.n	8004544 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <osMessageQueueGet+0x54>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <osMessageQueueGet+0x54>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004504:	f06f 0303 	mvn.w	r3, #3
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800450a:	e038      	b.n	800457e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004510:	f107 0310 	add.w	r3, r7, #16
 8004514:	461a      	mov	r2, r3
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	6a38      	ldr	r0, [r7, #32]
 800451a:	f000 fcd3 	bl	8004ec4 <xQueueReceiveFromISR>
 800451e:	4603      	mov	r3, r0
 8004520:	2b01      	cmp	r3, #1
 8004522:	d003      	beq.n	800452c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004524:	f06f 0302 	mvn.w	r3, #2
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800452a:	e028      	b.n	800457e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d025      	beq.n	800457e <osMessageQueueGet+0xce>
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <osMessageQueueGet+0xe0>)
 8004534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004542:	e01c      	b.n	800457e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004544:	6a3b      	ldr	r3, [r7, #32]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <osMessageQueueGet+0xa0>
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d103      	bne.n	8004558 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004550:	f06f 0303 	mvn.w	r3, #3
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
 8004556:	e013      	b.n	8004580 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	6a38      	ldr	r0, [r7, #32]
 800455e:	f000 fbd1 	bl	8004d04 <xQueueReceive>
 8004562:	4603      	mov	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d00b      	beq.n	8004580 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800456e:	f06f 0301 	mvn.w	r3, #1
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
 8004574:	e004      	b.n	8004580 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004576:	f06f 0302 	mvn.w	r3, #2
 800457a:	627b      	str	r3, [r7, #36]	; 0x24
 800457c:	e000      	b.n	8004580 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800457e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004582:	4618      	mov	r0, r3
 8004584:	3728      	adds	r7, #40	; 0x28
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000148 	.word	0x20000148
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a06      	ldr	r2, [pc, #24]	; (80045bc <vApplicationGetIdleTaskMemory+0x28>)
 80045a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4a05      	ldr	r2, [pc, #20]	; (80045c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80045aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2280      	movs	r2, #128	; 0x80
 80045b0:	601a      	str	r2, [r3, #0]
}
 80045b2:	bf00      	nop
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	2000014c 	.word	0x2000014c
 80045c0:	200001a8 	.word	0x200001a8

080045c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a07      	ldr	r2, [pc, #28]	; (80045f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80045d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a06      	ldr	r2, [pc, #24]	; (80045f4 <vApplicationGetTimerTaskMemory+0x30>)
 80045da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	200003a8 	.word	0x200003a8
 80045f4:	20000404 	.word	0x20000404

080045f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f103 0208 	add.w	r2, r3, #8
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f04f 32ff 	mov.w	r2, #4294967295
 8004610:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f103 0208 	add.w	r2, r3, #8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f103 0208 	add.w	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800464e:	b480      	push	{r7}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1c5a      	adds	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr

08004694 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d103      	bne.n	80046b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e00c      	b.n	80046ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3308      	adds	r3, #8
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e002      	b.n	80046c2 <vListInsert+0x2e>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d2f6      	bcs.n	80046bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	601a      	str	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6892      	ldr	r2, [r2, #8]
 800471a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6852      	ldr	r2, [r2, #4]
 8004724:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	429a      	cmp	r2, r3
 800472e:	d103      	bne.n	8004738 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	1e5a      	subs	r2, r3, #1
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr
	...

08004758 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004782:	f002 f883 	bl	800688c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	441a      	add	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	3b01      	subs	r3, #1
 80047b4:	68f9      	ldr	r1, [r7, #12]
 80047b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047b8:	fb01 f303 	mul.w	r3, r1, r3
 80047bc:	441a      	add	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	22ff      	movs	r2, #255	; 0xff
 80047c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	22ff      	movs	r2, #255	; 0xff
 80047ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d114      	bne.n	8004802 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d01a      	beq.n	8004816 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3310      	adds	r3, #16
 80047e4:	4618      	mov	r0, r3
 80047e6:	f001 f9af 	bl	8005b48 <xTaskRemoveFromEventList>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d012      	beq.n	8004816 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <xQueueGenericReset+0xcc>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	e009      	b.n	8004816 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3310      	adds	r3, #16
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fef6 	bl	80045f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3324      	adds	r3, #36	; 0x24
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff fef1 	bl	80045f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004816:	f002 f869 	bl	80068ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800481a:	2301      	movs	r3, #1
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08e      	sub	sp, #56	; 0x38
 800482c:	af02      	add	r7, sp, #8
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800484e:	bf00      	nop
 8004850:	e7fe      	b.n	8004850 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	627b      	str	r3, [r7, #36]	; 0x24
}
 800486a:	bf00      	nop
 800486c:	e7fe      	b.n	800486c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <xQueueGenericCreateStatic+0x52>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <xQueueGenericCreateStatic+0x56>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <xQueueGenericCreateStatic+0x58>
 800487e:	2300      	movs	r3, #0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	623b      	str	r3, [r7, #32]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d102      	bne.n	80048a6 <xQueueGenericCreateStatic+0x7e>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <xQueueGenericCreateStatic+0x82>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <xQueueGenericCreateStatic+0x84>
 80048aa:	2300      	movs	r3, #0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	61fb      	str	r3, [r7, #28]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80048c6:	2350      	movs	r3, #80	; 0x50
 80048c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b50      	cmp	r3, #80	; 0x50
 80048ce:	d00a      	beq.n	80048e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	61bb      	str	r3, [r7, #24]
}
 80048e2:	bf00      	nop
 80048e4:	e7fe      	b.n	80048e4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80048ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4613      	mov	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	68f8      	ldr	r0, [r7, #12]
 8004908:	f000 f843 	bl	8004992 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800490c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800490e:	4618      	mov	r0, r3
 8004910:	3730      	adds	r7, #48	; 0x30
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004916:	b580      	push	{r7, lr}
 8004918:	b08a      	sub	sp, #40	; 0x28
 800491a:	af02      	add	r7, sp, #8
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	4613      	mov	r3, r2
 8004922:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <xQueueGenericCreate+0x2a>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	613b      	str	r3, [r7, #16]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d102      	bne.n	800494c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e004      	b.n	8004956 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	fb02 f303 	mul.w	r3, r2, r3
 8004954:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3350      	adds	r3, #80	; 0x50
 800495a:	4618      	mov	r0, r3
 800495c:	f002 f896 	bl	8006a8c <pvPortMalloc>
 8004960:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00f      	beq.n	8004988 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	3350      	adds	r3, #80	; 0x50
 800496c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004976:	79fa      	ldrb	r2, [r7, #7]
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f805 	bl	8004992 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004988:	69bb      	ldr	r3, [r7, #24]
	}
 800498a:	4618      	mov	r0, r3
 800498c:	3720      	adds	r7, #32
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b084      	sub	sp, #16
 8004996:	af00      	add	r7, sp, #0
 8004998:	60f8      	str	r0, [r7, #12]
 800499a:	60b9      	str	r1, [r7, #8]
 800499c:	607a      	str	r2, [r7, #4]
 800499e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e002      	b.n	80049b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049c0:	2101      	movs	r1, #1
 80049c2:	69b8      	ldr	r0, [r7, #24]
 80049c4:	f7ff fec8 	bl	8004758 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08e      	sub	sp, #56	; 0x38
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10a      	bne.n	8004a0a <xQueueGenericSend+0x32>
	__asm volatile
 80049f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f8:	f383 8811 	msr	BASEPRI, r3
 80049fc:	f3bf 8f6f 	isb	sy
 8004a00:	f3bf 8f4f 	dsb	sy
 8004a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a06:	bf00      	nop
 8004a08:	e7fe      	b.n	8004a08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <xQueueGenericSend+0x40>
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <xQueueGenericSend+0x44>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <xQueueGenericSend+0x46>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <xQueueGenericSend+0x60>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	f383 8811 	msr	BASEPRI, r3
 8004a2a:	f3bf 8f6f 	isb	sy
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a34:	bf00      	nop
 8004a36:	e7fe      	b.n	8004a36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d103      	bne.n	8004a46 <xQueueGenericSend+0x6e>
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <xQueueGenericSend+0x72>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <xQueueGenericSend+0x74>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	623b      	str	r3, [r7, #32]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a66:	f001 fa31 	bl	8005ecc <xTaskGetSchedulerState>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d102      	bne.n	8004a76 <xQueueGenericSend+0x9e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <xQueueGenericSend+0xa2>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <xQueueGenericSend+0xa4>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <xQueueGenericSend+0xbe>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	61fb      	str	r3, [r7, #28]
}
 8004a92:	bf00      	nop
 8004a94:	e7fe      	b.n	8004a94 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a96:	f001 fef9 	bl	800688c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <xQueueGenericSend+0xd4>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d129      	bne.n	8004b00 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ab2:	f000 fa87 	bl	8004fc4 <prvCopyDataToQueue>
 8004ab6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d010      	beq.n	8004ae2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	3324      	adds	r3, #36	; 0x24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f001 f83f 	bl	8005b48 <xTaskRemoveFromEventList>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d013      	beq.n	8004af8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ad0:	4b3f      	ldr	r3, [pc, #252]	; (8004bd0 <xQueueGenericSend+0x1f8>)
 8004ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	e00a      	b.n	8004af8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ae8:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <xQueueGenericSend+0x1f8>)
 8004aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004af8:	f001 fef8 	bl	80068ec <vPortExitCritical>
				return pdPASS;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e063      	b.n	8004bc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b06:	f001 fef1 	bl	80068ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e05c      	b.n	8004bc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d106      	bne.n	8004b22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 f879 	bl	8005c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b22:	f001 fee3 	bl	80068ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b26:	f000 fdeb 	bl	8005700 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b2a:	f001 feaf 	bl	800688c <vPortEnterCritical>
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b34:	b25b      	sxtb	r3, r3
 8004b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b3a:	d103      	bne.n	8004b44 <xQueueGenericSend+0x16c>
 8004b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b4a:	b25b      	sxtb	r3, r3
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d103      	bne.n	8004b5a <xQueueGenericSend+0x182>
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b5a:	f001 fec7 	bl	80068ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b5e:	1d3a      	adds	r2, r7, #4
 8004b60:	f107 0314 	add.w	r3, r7, #20
 8004b64:	4611      	mov	r1, r2
 8004b66:	4618      	mov	r0, r3
 8004b68:	f001 f868 	bl	8005c3c <xTaskCheckForTimeOut>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d124      	bne.n	8004bbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004b72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b74:	f000 fb1e 	bl	80051b4 <prvIsQueueFull>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d018      	beq.n	8004bb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b80:	3310      	adds	r3, #16
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 ff8e 	bl	8005aa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b8e:	f000 faa9 	bl	80050e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004b92:	f000 fdc3 	bl	800571c <xTaskResumeAll>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f47f af7c 	bne.w	8004a96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004b9e:	4b0c      	ldr	r3, [pc, #48]	; (8004bd0 <xQueueGenericSend+0x1f8>)
 8004ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	e772      	b.n	8004a96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bb2:	f000 fa97 	bl	80050e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bb6:	f000 fdb1 	bl	800571c <xTaskResumeAll>
 8004bba:	e76c      	b.n	8004a96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bbe:	f000 fa91 	bl	80050e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004bc2:	f000 fdab 	bl	800571c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004bc6:	2300      	movs	r3, #0
		}
	}
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3738      	adds	r7, #56	; 0x38
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}
 8004bd0:	e000ed04 	.word	0xe000ed04

08004bd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08e      	sub	sp, #56	; 0x38
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
 8004be0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d10a      	bne.n	8004c02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf0:	f383 8811 	msr	BASEPRI, r3
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004bfe:	bf00      	nop
 8004c00:	e7fe      	b.n	8004c00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d103      	bne.n	8004c10 <xQueueGenericSendFromISR+0x3c>
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <xQueueGenericSendFromISR+0x40>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <xQueueGenericSendFromISR+0x42>
 8004c14:	2300      	movs	r3, #0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10a      	bne.n	8004c30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	623b      	str	r3, [r7, #32]
}
 8004c2c:	bf00      	nop
 8004c2e:	e7fe      	b.n	8004c2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d103      	bne.n	8004c3e <xQueueGenericSendFromISR+0x6a>
 8004c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <xQueueGenericSendFromISR+0x6e>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <xQueueGenericSendFromISR+0x70>
 8004c42:	2300      	movs	r3, #0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	61fb      	str	r3, [r7, #28]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c5e:	f001 fed7 	bl	8006a10 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004c62:	f3ef 8211 	mrs	r2, BASEPRI
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	61ba      	str	r2, [r7, #24]
 8004c78:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <xQueueGenericSendFromISR+0xbc>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d12c      	bne.n	8004cea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	68b9      	ldr	r1, [r7, #8]
 8004c9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ca0:	f000 f990 	bl	8004fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ca4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cac:	d112      	bne.n	8004cd4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb8:	3324      	adds	r3, #36	; 0x24
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 ff44 	bl	8005b48 <xTaskRemoveFromEventList>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00e      	beq.n	8004ce4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e007      	b.n	8004ce4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cd8:	3301      	adds	r3, #1
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	b25a      	sxtb	r2, r3
 8004cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004ce8:	e001      	b.n	8004cee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3738      	adds	r7, #56	; 0x38
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b08c      	sub	sp, #48	; 0x30
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <xQueueReceive+0x30>
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	623b      	str	r3, [r7, #32]
}
 8004d30:	bf00      	nop
 8004d32:	e7fe      	b.n	8004d32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d103      	bne.n	8004d42 <xQueueReceive+0x3e>
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <xQueueReceive+0x42>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <xQueueReceive+0x44>
 8004d46:	2300      	movs	r3, #0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <xQueueReceive+0x5e>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	61fb      	str	r3, [r7, #28]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d62:	f001 f8b3 	bl	8005ecc <xTaskGetSchedulerState>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <xQueueReceive+0x6e>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <xQueueReceive+0x72>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <xQueueReceive+0x74>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10a      	bne.n	8004d92 <xQueueReceive+0x8e>
	__asm volatile
 8004d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d80:	f383 8811 	msr	BASEPRI, r3
 8004d84:	f3bf 8f6f 	isb	sy
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	61bb      	str	r3, [r7, #24]
}
 8004d8e:	bf00      	nop
 8004d90:	e7fe      	b.n	8004d90 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d92:	f001 fd7b 	bl	800688c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01f      	beq.n	8004de2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004da2:	68b9      	ldr	r1, [r7, #8]
 8004da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da6:	f000 f977 	bl	8005098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	1e5a      	subs	r2, r3, #1
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00f      	beq.n	8004dda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	3310      	adds	r3, #16
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fec2 	bl	8005b48 <xTaskRemoveFromEventList>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dca:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <xQueueReceive+0x1bc>)
 8004dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dda:	f001 fd87 	bl	80068ec <vPortExitCritical>
				return pdPASS;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e069      	b.n	8004eb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004de8:	f001 fd80 	bl	80068ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004dec:	2300      	movs	r3, #0
 8004dee:	e062      	b.n	8004eb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004df6:	f107 0310 	add.w	r3, r7, #16
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 ff08 	bl	8005c10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e04:	f001 fd72 	bl	80068ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e08:	f000 fc7a 	bl	8005700 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e0c:	f001 fd3e 	bl	800688c <vPortEnterCritical>
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e16:	b25b      	sxtb	r3, r3
 8004e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1c:	d103      	bne.n	8004e26 <xQueueReceive+0x122>
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e2c:	b25b      	sxtb	r3, r3
 8004e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e32:	d103      	bne.n	8004e3c <xQueueReceive+0x138>
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e3c:	f001 fd56 	bl	80068ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e40:	1d3a      	adds	r2, r7, #4
 8004e42:	f107 0310 	add.w	r3, r7, #16
 8004e46:	4611      	mov	r1, r2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fef7 	bl	8005c3c <xTaskCheckForTimeOut>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d123      	bne.n	8004e9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e56:	f000 f997 	bl	8005188 <prvIsQueueEmpty>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d017      	beq.n	8004e90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e62:	3324      	adds	r3, #36	; 0x24
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4611      	mov	r1, r2
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f000 fe1d 	bl	8005aa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e70:	f000 f938 	bl	80050e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e74:	f000 fc52 	bl	800571c <xTaskResumeAll>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d189      	bne.n	8004d92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004e7e:	4b10      	ldr	r3, [pc, #64]	; (8004ec0 <xQueueReceive+0x1bc>)
 8004e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	e780      	b.n	8004d92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e92:	f000 f927 	bl	80050e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e96:	f000 fc41 	bl	800571c <xTaskResumeAll>
 8004e9a:	e77a      	b.n	8004d92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e9e:	f000 f921 	bl	80050e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ea2:	f000 fc3b 	bl	800571c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea8:	f000 f96e 	bl	8005188 <prvIsQueueEmpty>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f43f af6f 	beq.w	8004d92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004eb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3730      	adds	r7, #48	; 0x30
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08e      	sub	sp, #56	; 0x38
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	623b      	str	r3, [r7, #32]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <xQueueReceiveFromISR+0x3a>
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <xQueueReceiveFromISR+0x3e>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <xQueueReceiveFromISR+0x40>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	61fb      	str	r3, [r7, #28]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f1e:	f001 fd77 	bl	8006a10 <vPortValidateInterruptPriority>
	__asm volatile
 8004f22:	f3ef 8211 	mrs	r2, BASEPRI
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	61ba      	str	r2, [r7, #24]
 8004f38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d02f      	beq.n	8004faa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f54:	68b9      	ldr	r1, [r7, #8]
 8004f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f58:	f000 f89e 	bl	8005098 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	1e5a      	subs	r2, r3, #1
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d112      	bne.n	8004f94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d016      	beq.n	8004fa4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f78:	3310      	adds	r3, #16
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fde4 	bl	8005b48 <xTaskRemoveFromEventList>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00e      	beq.n	8004fa4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	e007      	b.n	8004fa4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f98:	3301      	adds	r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	b25a      	sxtb	r2, r3
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fa8:	e001      	b.n	8004fae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	637b      	str	r3, [r7, #52]	; 0x34
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f383 8811 	msr	BASEPRI, r3
}
 8004fb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3738      	adds	r7, #56	; 0x38
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10d      	bne.n	8004ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d14d      	bne.n	8005086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 ff8a 	bl	8005f08 <xTaskPriorityDisinherit>
 8004ff4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	605a      	str	r2, [r3, #4]
 8004ffc:	e043      	b.n	8005086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d119      	bne.n	8005038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6898      	ldr	r0, [r3, #8]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	461a      	mov	r2, r3
 800500e:	68b9      	ldr	r1, [r7, #8]
 8005010:	f001 ff38 	bl	8006e84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	441a      	add	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	429a      	cmp	r2, r3
 800502c:	d32b      	bcc.n	8005086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	609a      	str	r2, [r3, #8]
 8005036:	e026      	b.n	8005086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68d8      	ldr	r0, [r3, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	461a      	mov	r2, r3
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	f001 ff1e 	bl	8006e84 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68da      	ldr	r2, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	425b      	negs	r3, r3
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d207      	bcs.n	8005074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506c:	425b      	negs	r3, r3
 800506e:	441a      	add	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d105      	bne.n	8005086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3b01      	subs	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800508e:	697b      	ldr	r3, [r7, #20]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d018      	beq.n	80050dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	441a      	add	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d303      	bcc.n	80050cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68d9      	ldr	r1, [r3, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	461a      	mov	r2, r3
 80050d6:	6838      	ldr	r0, [r7, #0]
 80050d8:	f001 fed4 	bl	8006e84 <memcpy>
	}
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050ec:	f001 fbce 	bl	800688c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f8:	e011      	b.n	800511e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d012      	beq.n	8005128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3324      	adds	r3, #36	; 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fd1e 	bl	8005b48 <xTaskRemoveFromEventList>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d001      	beq.n	8005116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005112:	f000 fdf5 	bl	8005d00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	3b01      	subs	r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	dce9      	bgt.n	80050fa <prvUnlockQueue+0x16>
 8005126:	e000      	b.n	800512a <prvUnlockQueue+0x46>
					break;
 8005128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	22ff      	movs	r2, #255	; 0xff
 800512e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005132:	f001 fbdb 	bl	80068ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005136:	f001 fba9 	bl	800688c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005142:	e011      	b.n	8005168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d012      	beq.n	8005172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3310      	adds	r3, #16
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fcf9 	bl	8005b48 <xTaskRemoveFromEventList>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800515c:	f000 fdd0 	bl	8005d00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005160:	7bbb      	ldrb	r3, [r7, #14]
 8005162:	3b01      	subs	r3, #1
 8005164:	b2db      	uxtb	r3, r3
 8005166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800516c:	2b00      	cmp	r3, #0
 800516e:	dce9      	bgt.n	8005144 <prvUnlockQueue+0x60>
 8005170:	e000      	b.n	8005174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	22ff      	movs	r2, #255	; 0xff
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800517c:	f001 fbb6 	bl	80068ec <vPortExitCritical>
}
 8005180:	bf00      	nop
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005190:	f001 fb7c 	bl	800688c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005198:	2b00      	cmp	r3, #0
 800519a:	d102      	bne.n	80051a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800519c:	2301      	movs	r3, #1
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	e001      	b.n	80051a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051a6:	f001 fba1 	bl	80068ec <vPortExitCritical>

	return xReturn;
 80051aa:	68fb      	ldr	r3, [r7, #12]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051bc:	f001 fb66 	bl	800688c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d102      	bne.n	80051d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051cc:	2301      	movs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
 80051d0:	e001      	b.n	80051d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051d6:	f001 fb89 	bl	80068ec <vPortExitCritical>

	return xReturn;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3710      	adds	r7, #16
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e014      	b.n	800521e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051f4:	4a0e      	ldr	r2, [pc, #56]	; (8005230 <vQueueAddToRegistry+0x4c>)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005200:	490b      	ldr	r1, [pc, #44]	; (8005230 <vQueueAddToRegistry+0x4c>)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <vQueueAddToRegistry+0x4c>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005216:	e006      	b.n	8005226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2b07      	cmp	r3, #7
 8005222:	d9e7      	bls.n	80051f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005224:	bf00      	nop
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr
 8005230:	20000804 	.word	0x20000804

08005234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005244:	f001 fb22 	bl	800688c <vPortEnterCritical>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800524e:	b25b      	sxtb	r3, r3
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d103      	bne.n	800525e <vQueueWaitForMessageRestricted+0x2a>
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005264:	b25b      	sxtb	r3, r3
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d103      	bne.n	8005274 <vQueueWaitForMessageRestricted+0x40>
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005274:	f001 fb3a 	bl	80068ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	3324      	adds	r3, #36	; 0x24
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fc31 	bl	8005af0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800528e:	6978      	ldr	r0, [r7, #20]
 8005290:	f7ff ff28 	bl	80050e4 <prvUnlockQueue>
	}
 8005294:	bf00      	nop
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	; 0x38
 80052a0:	af04      	add	r7, sp, #16
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	623b      	str	r3, [r7, #32]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10a      	bne.n	80052e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80052cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d0:	f383 8811 	msr	BASEPRI, r3
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	61fb      	str	r3, [r7, #28]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052e2:	235c      	movs	r3, #92	; 0x5c
 80052e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b5c      	cmp	r3, #92	; 0x5c
 80052ea:	d00a      	beq.n	8005302 <xTaskCreateStatic+0x66>
	__asm volatile
 80052ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f0:	f383 8811 	msr	BASEPRI, r3
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	61bb      	str	r3, [r7, #24]
}
 80052fe:	bf00      	nop
 8005300:	e7fe      	b.n	8005300 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01e      	beq.n	8005346 <xTaskCreateStatic+0xaa>
 8005308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01b      	beq.n	8005346 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800530e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005316:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005320:	2300      	movs	r3, #0
 8005322:	9303      	str	r3, [sp, #12]
 8005324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005326:	9302      	str	r3, [sp, #8]
 8005328:	f107 0314 	add.w	r3, r7, #20
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f850 	bl	80053de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800533e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005340:	f000 f8d4 	bl	80054ec <prvAddNewTaskToReadyList>
 8005344:	e001      	b.n	800534a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800534a:	697b      	ldr	r3, [r7, #20]
	}
 800534c:	4618      	mov	r0, r3
 800534e:	3728      	adds	r7, #40	; 0x28
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08c      	sub	sp, #48	; 0x30
 8005358:	af04      	add	r7, sp, #16
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f001 fb8f 	bl	8006a8c <pvPortMalloc>
 800536e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00e      	beq.n	8005394 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005376:	205c      	movs	r0, #92	; 0x5c
 8005378:	f001 fb88 	bl	8006a8c <pvPortMalloc>
 800537c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
 800538a:	e005      	b.n	8005398 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800538c:	6978      	ldr	r0, [r7, #20]
 800538e:	f001 fc41 	bl	8006c14 <vPortFree>
 8005392:	e001      	b.n	8005398 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d017      	beq.n	80053ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053a6:	88fa      	ldrh	r2, [r7, #6]
 80053a8:	2300      	movs	r3, #0
 80053aa:	9303      	str	r3, [sp, #12]
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	9302      	str	r3, [sp, #8]
 80053b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b2:	9301      	str	r3, [sp, #4]
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	9300      	str	r3, [sp, #0]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f80e 	bl	80053de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053c2:	69f8      	ldr	r0, [r7, #28]
 80053c4:	f000 f892 	bl	80054ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053c8:	2301      	movs	r3, #1
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	e002      	b.n	80053d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053ce:	f04f 33ff 	mov.w	r3, #4294967295
 80053d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053d4:	69bb      	ldr	r3, [r7, #24]
	}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3720      	adds	r7, #32
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b088      	sub	sp, #32
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	461a      	mov	r2, r3
 80053f6:	21a5      	movs	r1, #165	; 0xa5
 80053f8:	f001 fd52 	bl	8006ea0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005406:	3b01      	subs	r3, #1
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	4413      	add	r3, r2
 800540c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f023 0307 	bic.w	r3, r3, #7
 8005414:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	617b      	str	r3, [r7, #20]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	e012      	b.n	8005462 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	7819      	ldrb	r1, [r3, #0]
 8005444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	4413      	add	r3, r2
 800544a:	3334      	adds	r3, #52	; 0x34
 800544c:	460a      	mov	r2, r1
 800544e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4413      	add	r3, r2
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d006      	beq.n	800546a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	3301      	adds	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2b0f      	cmp	r3, #15
 8005466:	d9e9      	bls.n	800543c <prvInitialiseNewTask+0x5e>
 8005468:	e000      	b.n	800546c <prvInitialiseNewTask+0x8e>
		{
			break;
 800546a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	2b37      	cmp	r3, #55	; 0x37
 8005478:	d901      	bls.n	800547e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800547a:	2337      	movs	r3, #55	; 0x37
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800547e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005488:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	2200      	movs	r2, #0
 800548e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff f8ce 	bl	8004636 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	3318      	adds	r3, #24
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff f8c9 	bl	8004636 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2200      	movs	r2, #0
 80054be:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	68f9      	ldr	r1, [r7, #12]
 80054cc:	69b8      	ldr	r0, [r7, #24]
 80054ce:	f001 f8ef 	bl	80066b0 <pxPortInitialiseStack>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054e4:	bf00      	nop
 80054e6:	3720      	adds	r7, #32
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054f4:	f001 f9ca 	bl	800688c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a2c      	ldr	r2, [pc, #176]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 8005500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800550a:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d110      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005518:	f000 fc16 	bl	8005d48 <prvInitialiseTaskLists>
 800551c:	e00d      	b.n	800553a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800551e:	4b26      	ldr	r3, [pc, #152]	; (80055b8 <prvAddNewTaskToReadyList+0xcc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005526:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d802      	bhi.n	800553a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800553a:	4b20      	ldr	r3, [pc, #128]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	4a1e      	ldr	r2, [pc, #120]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 8005542:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <prvAddNewTaskToReadyList+0xd4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d903      	bls.n	8005560 <prvAddNewTaskToReadyList+0x74>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a18      	ldr	r2, [pc, #96]	; (80055c0 <prvAddNewTaskToReadyList+0xd4>)
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <prvAddNewTaskToReadyList+0xd8>)
 800556e:	441a      	add	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7ff f869 	bl	800464e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800557c:	f001 f9b6 	bl	80068ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <prvAddNewTaskToReadyList+0xcc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00e      	beq.n	80055a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	429a      	cmp	r2, r3
 8005594:	d207      	bcs.n	80055a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005596:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <prvAddNewTaskToReadyList+0xdc>)
 8005598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000d18 	.word	0x20000d18
 80055b4:	20000844 	.word	0x20000844
 80055b8:	20000d24 	.word	0x20000d24
 80055bc:	20000d34 	.word	0x20000d34
 80055c0:	20000d20 	.word	0x20000d20
 80055c4:	20000848 	.word	0x20000848
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <vTaskDelay+0x60>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <vTaskDelay+0x30>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60bb      	str	r3, [r7, #8]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055fc:	f000 f880 	bl	8005700 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005600:	2100      	movs	r1, #0
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fcee 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005608:	f000 f888 	bl	800571c <xTaskResumeAll>
 800560c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005614:	4b06      	ldr	r3, [pc, #24]	; (8005630 <vTaskDelay+0x64>)
 8005616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000d40 	.word	0x20000d40
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	; 0x28
 8005638:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005642:	463a      	mov	r2, r7
 8005644:	1d39      	adds	r1, r7, #4
 8005646:	f107 0308 	add.w	r3, r7, #8
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe ffa2 	bl	8004594 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	9202      	str	r2, [sp, #8]
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	2300      	movs	r3, #0
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2300      	movs	r3, #0
 8005660:	460a      	mov	r2, r1
 8005662:	4921      	ldr	r1, [pc, #132]	; (80056e8 <vTaskStartScheduler+0xb4>)
 8005664:	4821      	ldr	r0, [pc, #132]	; (80056ec <vTaskStartScheduler+0xb8>)
 8005666:	f7ff fe19 	bl	800529c <xTaskCreateStatic>
 800566a:	4603      	mov	r3, r0
 800566c:	4a20      	ldr	r2, [pc, #128]	; (80056f0 <vTaskStartScheduler+0xbc>)
 800566e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005670:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <vTaskStartScheduler+0xbc>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005678:	2301      	movs	r3, #1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e001      	b.n	8005682 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005688:	f000 fd00 	bl	800608c <xTimerCreateTimerTask>
 800568c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d116      	bne.n	80056c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	613b      	str	r3, [r7, #16]
}
 80056a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056a8:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <vTaskStartScheduler+0xc0>)
 80056aa:	f04f 32ff 	mov.w	r2, #4294967295
 80056ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056b0:	4b11      	ldr	r3, [pc, #68]	; (80056f8 <vTaskStartScheduler+0xc4>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80056b6:	4b11      	ldr	r3, [pc, #68]	; (80056fc <vTaskStartScheduler+0xc8>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056bc:	f001 f874 	bl	80067a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056c0:	e00e      	b.n	80056e0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c8:	d10a      	bne.n	80056e0 <vTaskStartScheduler+0xac>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	60fb      	str	r3, [r7, #12]
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <vTaskStartScheduler+0xaa>
}
 80056e0:	bf00      	nop
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	08006f80 	.word	0x08006f80
 80056ec:	08005d19 	.word	0x08005d19
 80056f0:	20000d3c 	.word	0x20000d3c
 80056f4:	20000d38 	.word	0x20000d38
 80056f8:	20000d24 	.word	0x20000d24
 80056fc:	20000d1c 	.word	0x20000d1c

08005700 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <vTaskSuspendAll+0x18>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	4a03      	ldr	r2, [pc, #12]	; (8005718 <vTaskSuspendAll+0x18>)
 800570c:	6013      	str	r3, [r2, #0]
}
 800570e:	bf00      	nop
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	20000d40 	.word	0x20000d40

0800571c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800572a:	4b42      	ldr	r3, [pc, #264]	; (8005834 <xTaskResumeAll+0x118>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <xTaskResumeAll+0x2c>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	603b      	str	r3, [r7, #0]
}
 8005744:	bf00      	nop
 8005746:	e7fe      	b.n	8005746 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005748:	f001 f8a0 	bl	800688c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800574c:	4b39      	ldr	r3, [pc, #228]	; (8005834 <xTaskResumeAll+0x118>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3b01      	subs	r3, #1
 8005752:	4a38      	ldr	r2, [pc, #224]	; (8005834 <xTaskResumeAll+0x118>)
 8005754:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005756:	4b37      	ldr	r3, [pc, #220]	; (8005834 <xTaskResumeAll+0x118>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d162      	bne.n	8005824 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800575e:	4b36      	ldr	r3, [pc, #216]	; (8005838 <xTaskResumeAll+0x11c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d05e      	beq.n	8005824 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005766:	e02f      	b.n	80057c8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005768:	4b34      	ldr	r3, [pc, #208]	; (800583c <xTaskResumeAll+0x120>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3318      	adds	r3, #24
 8005774:	4618      	mov	r0, r3
 8005776:	f7fe ffc5 	bl	8004704 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3304      	adds	r3, #4
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe ffc0 	bl	8004704 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005788:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <xTaskResumeAll+0x124>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d903      	bls.n	8005798 <xTaskResumeAll+0x7c>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	4a2a      	ldr	r2, [pc, #168]	; (8005840 <xTaskResumeAll+0x124>)
 8005796:	6013      	str	r3, [r2, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	4a27      	ldr	r2, [pc, #156]	; (8005844 <xTaskResumeAll+0x128>)
 80057a6:	441a      	add	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f7fe ff4d 	bl	800464e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b8:	4b23      	ldr	r3, [pc, #140]	; (8005848 <xTaskResumeAll+0x12c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	429a      	cmp	r2, r3
 80057c0:	d302      	bcc.n	80057c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057c2:	4b22      	ldr	r3, [pc, #136]	; (800584c <xTaskResumeAll+0x130>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057c8:	4b1c      	ldr	r3, [pc, #112]	; (800583c <xTaskResumeAll+0x120>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1cb      	bne.n	8005768 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d001      	beq.n	80057da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057d6:	f000 fb55 	bl	8005e84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80057da:	4b1d      	ldr	r3, [pc, #116]	; (8005850 <xTaskResumeAll+0x134>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d010      	beq.n	8005808 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057e6:	f000 f845 	bl	8005874 <xTaskIncrementTick>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d002      	beq.n	80057f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80057f0:	4b16      	ldr	r3, [pc, #88]	; (800584c <xTaskResumeAll+0x130>)
 80057f2:	2201      	movs	r2, #1
 80057f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f1      	bne.n	80057e6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <xTaskResumeAll+0x134>)
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005808:	4b10      	ldr	r3, [pc, #64]	; (800584c <xTaskResumeAll+0x130>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d009      	beq.n	8005824 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005810:	2301      	movs	r3, #1
 8005812:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <xTaskResumeAll+0x138>)
 8005816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005824:	f001 f862 	bl	80068ec <vPortExitCritical>

	return xAlreadyYielded;
 8005828:	68bb      	ldr	r3, [r7, #8]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000d40 	.word	0x20000d40
 8005838:	20000d18 	.word	0x20000d18
 800583c:	20000cd8 	.word	0x20000cd8
 8005840:	20000d20 	.word	0x20000d20
 8005844:	20000848 	.word	0x20000848
 8005848:	20000844 	.word	0x20000844
 800584c:	20000d2c 	.word	0x20000d2c
 8005850:	20000d28 	.word	0x20000d28
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800585e:	4b04      	ldr	r3, [pc, #16]	; (8005870 <xTaskGetTickCount+0x18>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005864:	687b      	ldr	r3, [r7, #4]
}
 8005866:	4618      	mov	r0, r3
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr
 8005870:	20000d1c 	.word	0x20000d1c

08005874 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800587e:	4b51      	ldr	r3, [pc, #324]	; (80059c4 <xTaskIncrementTick+0x150>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 808e 	bne.w	80059a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005888:	4b4f      	ldr	r3, [pc, #316]	; (80059c8 <xTaskIncrementTick+0x154>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3301      	adds	r3, #1
 800588e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005890:	4a4d      	ldr	r2, [pc, #308]	; (80059c8 <xTaskIncrementTick+0x154>)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d120      	bne.n	80058de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800589c:	4b4b      	ldr	r3, [pc, #300]	; (80059cc <xTaskIncrementTick+0x158>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <xTaskIncrementTick+0x48>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	603b      	str	r3, [r7, #0]
}
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <xTaskIncrementTick+0x46>
 80058bc:	4b43      	ldr	r3, [pc, #268]	; (80059cc <xTaskIncrementTick+0x158>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	4b43      	ldr	r3, [pc, #268]	; (80059d0 <xTaskIncrementTick+0x15c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a41      	ldr	r2, [pc, #260]	; (80059cc <xTaskIncrementTick+0x158>)
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	4a41      	ldr	r2, [pc, #260]	; (80059d0 <xTaskIncrementTick+0x15c>)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6013      	str	r3, [r2, #0]
 80058d0:	4b40      	ldr	r3, [pc, #256]	; (80059d4 <xTaskIncrementTick+0x160>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3301      	adds	r3, #1
 80058d6:	4a3f      	ldr	r2, [pc, #252]	; (80059d4 <xTaskIncrementTick+0x160>)
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	f000 fad3 	bl	8005e84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058de:	4b3e      	ldr	r3, [pc, #248]	; (80059d8 <xTaskIncrementTick+0x164>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d34e      	bcc.n	8005986 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058e8:	4b38      	ldr	r3, [pc, #224]	; (80059cc <xTaskIncrementTick+0x158>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <xTaskIncrementTick+0x82>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <xTaskIncrementTick+0x84>
 80058f6:	2300      	movs	r3, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d004      	beq.n	8005906 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fc:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <xTaskIncrementTick+0x164>)
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	601a      	str	r2, [r3, #0]
					break;
 8005904:	e03f      	b.n	8005986 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005906:	4b31      	ldr	r3, [pc, #196]	; (80059cc <xTaskIncrementTick+0x158>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	429a      	cmp	r2, r3
 800591c:	d203      	bcs.n	8005926 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800591e:	4a2e      	ldr	r2, [pc, #184]	; (80059d8 <xTaskIncrementTick+0x164>)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6013      	str	r3, [r2, #0]
						break;
 8005924:	e02f      	b.n	8005986 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	3304      	adds	r3, #4
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe feea 	bl	8004704 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005934:	2b00      	cmp	r3, #0
 8005936:	d004      	beq.n	8005942 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	3318      	adds	r3, #24
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fee1 	bl	8004704 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005946:	4b25      	ldr	r3, [pc, #148]	; (80059dc <xTaskIncrementTick+0x168>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d903      	bls.n	8005956 <xTaskIncrementTick+0xe2>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	4a22      	ldr	r2, [pc, #136]	; (80059dc <xTaskIncrementTick+0x168>)
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <xTaskIncrementTick+0x16c>)
 8005964:	441a      	add	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	3304      	adds	r3, #4
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f7fe fe6e 	bl	800464e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005976:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <xTaskIncrementTick+0x170>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	429a      	cmp	r2, r3
 800597e:	d3b3      	bcc.n	80058e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005980:	2301      	movs	r3, #1
 8005982:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005984:	e7b0      	b.n	80058e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005986:	4b17      	ldr	r3, [pc, #92]	; (80059e4 <xTaskIncrementTick+0x170>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598c:	4914      	ldr	r1, [pc, #80]	; (80059e0 <xTaskIncrementTick+0x16c>)
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d907      	bls.n	80059ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800599e:	2301      	movs	r3, #1
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e004      	b.n	80059ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059a4:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <xTaskIncrementTick+0x174>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	4a0f      	ldr	r2, [pc, #60]	; (80059e8 <xTaskIncrementTick+0x174>)
 80059ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059ae:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <xTaskIncrementTick+0x178>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80059ba:	697b      	ldr	r3, [r7, #20]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000d40 	.word	0x20000d40
 80059c8:	20000d1c 	.word	0x20000d1c
 80059cc:	20000cd0 	.word	0x20000cd0
 80059d0:	20000cd4 	.word	0x20000cd4
 80059d4:	20000d30 	.word	0x20000d30
 80059d8:	20000d38 	.word	0x20000d38
 80059dc:	20000d20 	.word	0x20000d20
 80059e0:	20000848 	.word	0x20000848
 80059e4:	20000844 	.word	0x20000844
 80059e8:	20000d28 	.word	0x20000d28
 80059ec:	20000d2c 	.word	0x20000d2c

080059f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <vTaskSwitchContext+0xa4>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80059fe:	4b26      	ldr	r3, [pc, #152]	; (8005a98 <vTaskSwitchContext+0xa8>)
 8005a00:	2201      	movs	r2, #1
 8005a02:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a04:	e041      	b.n	8005a8a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <vTaskSwitchContext+0xa8>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a0c:	4b23      	ldr	r3, [pc, #140]	; (8005a9c <vTaskSwitchContext+0xac>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e010      	b.n	8005a36 <vTaskSwitchContext+0x46>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	607b      	str	r3, [r7, #4]
}
 8005a2c:	bf00      	nop
 8005a2e:	e7fe      	b.n	8005a2e <vTaskSwitchContext+0x3e>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	491a      	ldr	r1, [pc, #104]	; (8005aa0 <vTaskSwitchContext+0xb0>)
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0e4      	beq.n	8005a14 <vTaskSwitchContext+0x24>
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4a12      	ldr	r2, [pc, #72]	; (8005aa0 <vTaskSwitchContext+0xb0>)
 8005a56:	4413      	add	r3, r2
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d104      	bne.n	8005a7a <vTaskSwitchContext+0x8a>
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	605a      	str	r2, [r3, #4]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4a08      	ldr	r2, [pc, #32]	; (8005aa4 <vTaskSwitchContext+0xb4>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	4a05      	ldr	r2, [pc, #20]	; (8005a9c <vTaskSwitchContext+0xac>)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6013      	str	r3, [r2, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bc80      	pop	{r7}
 8005a92:	4770      	bx	lr
 8005a94:	20000d40 	.word	0x20000d40
 8005a98:	20000d2c 	.word	0x20000d2c
 8005a9c:	20000d20 	.word	0x20000d20
 8005aa0:	20000848 	.word	0x20000848
 8005aa4:	20000844 	.word	0x20000844

08005aa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	60fb      	str	r3, [r7, #12]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <vTaskPlaceOnEventList+0x44>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3318      	adds	r3, #24
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fe fddc 	bl	8004694 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005adc:	2101      	movs	r1, #1
 8005ade:	6838      	ldr	r0, [r7, #0]
 8005ae0:	f000 fa80 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
}
 8005ae4:	bf00      	nop
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	20000844 	.word	0x20000844

08005af0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10a      	bne.n	8005b18 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b06:	f383 8811 	msr	BASEPRI, r3
 8005b0a:	f3bf 8f6f 	isb	sy
 8005b0e:	f3bf 8f4f 	dsb	sy
 8005b12:	617b      	str	r3, [r7, #20]
}
 8005b14:	bf00      	nop
 8005b16:	e7fe      	b.n	8005b16 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3318      	adds	r3, #24
 8005b1e:	4619      	mov	r1, r3
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7fe fd94 	bl	800464e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b30:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	68b8      	ldr	r0, [r7, #8]
 8005b36:	f000 fa55 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
	}
 8005b3a:	bf00      	nop
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000844 	.word	0x20000844

08005b48 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	60fb      	str	r3, [r7, #12]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	3318      	adds	r3, #24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe fdc3 	bl	8004704 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b7e:	4b1e      	ldr	r3, [pc, #120]	; (8005bf8 <xTaskRemoveFromEventList+0xb0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d11d      	bne.n	8005bc2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe fdba 	bl	8004704 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b94:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <xTaskRemoveFromEventList+0xb4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d903      	bls.n	8005ba4 <xTaskRemoveFromEventList+0x5c>
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba0:	4a16      	ldr	r2, [pc, #88]	; (8005bfc <xTaskRemoveFromEventList+0xb4>)
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <xTaskRemoveFromEventList+0xb8>)
 8005bb2:	441a      	add	r2, r3
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4610      	mov	r0, r2
 8005bbc:	f7fe fd47 	bl	800464e <vListInsertEnd>
 8005bc0:	e005      	b.n	8005bce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	3318      	adds	r3, #24
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	480e      	ldr	r0, [pc, #56]	; (8005c04 <xTaskRemoveFromEventList+0xbc>)
 8005bca:	f7fe fd40 	bl	800464e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	4b0d      	ldr	r3, [pc, #52]	; (8005c08 <xTaskRemoveFromEventList+0xc0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d905      	bls.n	8005be8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <xTaskRemoveFromEventList+0xc4>)
 8005be2:	2201      	movs	r2, #1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e001      	b.n	8005bec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005bec:	697b      	ldr	r3, [r7, #20]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	20000d40 	.word	0x20000d40
 8005bfc:	20000d20 	.word	0x20000d20
 8005c00:	20000848 	.word	0x20000848
 8005c04:	20000cd8 	.word	0x20000cd8
 8005c08:	20000844 	.word	0x20000844
 8005c0c:	20000d2c 	.word	0x20000d2c

08005c10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c18:	4b06      	ldr	r3, [pc, #24]	; (8005c34 <vTaskInternalSetTimeOutState+0x24>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c20:	4b05      	ldr	r3, [pc, #20]	; (8005c38 <vTaskInternalSetTimeOutState+0x28>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	605a      	str	r2, [r3, #4]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	20000d30 	.word	0x20000d30
 8005c38:	20000d1c 	.word	0x20000d1c

08005c3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	613b      	str	r3, [r7, #16]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10a      	bne.n	8005c7e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	60fb      	str	r3, [r7, #12]
}
 8005c7a:	bf00      	nop
 8005c7c:	e7fe      	b.n	8005c7c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c7e:	f000 fe05 	bl	800688c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c82:	4b1d      	ldr	r3, [pc, #116]	; (8005cf8 <xTaskCheckForTimeOut+0xbc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d102      	bne.n	8005ca2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	e023      	b.n	8005cea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b15      	ldr	r3, [pc, #84]	; (8005cfc <xTaskCheckForTimeOut+0xc0>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d007      	beq.n	8005cbe <xTaskCheckForTimeOut+0x82>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d302      	bcc.n	8005cbe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	61fb      	str	r3, [r7, #28]
 8005cbc:	e015      	b.n	8005cea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d20b      	bcs.n	8005ce0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff ff9b 	bl	8005c10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	e004      	b.n	8005cea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005cea:	f000 fdff 	bl	80068ec <vPortExitCritical>

	return xReturn;
 8005cee:	69fb      	ldr	r3, [r7, #28]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20000d1c 	.word	0x20000d1c
 8005cfc:	20000d30 	.word	0x20000d30

08005d00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d04:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <vTaskMissedYield+0x14>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
}
 8005d0a:	bf00      	nop
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bc80      	pop	{r7}
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	20000d2c 	.word	0x20000d2c

08005d18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d20:	f000 f852 	bl	8005dc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d24:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <prvIdleTask+0x28>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d9f9      	bls.n	8005d20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d2c:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <prvIdleTask+0x2c>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d3c:	e7f0      	b.n	8005d20 <prvIdleTask+0x8>
 8005d3e:	bf00      	nop
 8005d40:	20000848 	.word	0x20000848
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d4e:	2300      	movs	r3, #0
 8005d50:	607b      	str	r3, [r7, #4]
 8005d52:	e00c      	b.n	8005d6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4a12      	ldr	r2, [pc, #72]	; (8005da8 <prvInitialiseTaskLists+0x60>)
 8005d60:	4413      	add	r3, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fe fc48 	bl	80045f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	607b      	str	r3, [r7, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b37      	cmp	r3, #55	; 0x37
 8005d72:	d9ef      	bls.n	8005d54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d74:	480d      	ldr	r0, [pc, #52]	; (8005dac <prvInitialiseTaskLists+0x64>)
 8005d76:	f7fe fc3f 	bl	80045f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d7a:	480d      	ldr	r0, [pc, #52]	; (8005db0 <prvInitialiseTaskLists+0x68>)
 8005d7c:	f7fe fc3c 	bl	80045f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d80:	480c      	ldr	r0, [pc, #48]	; (8005db4 <prvInitialiseTaskLists+0x6c>)
 8005d82:	f7fe fc39 	bl	80045f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d86:	480c      	ldr	r0, [pc, #48]	; (8005db8 <prvInitialiseTaskLists+0x70>)
 8005d88:	f7fe fc36 	bl	80045f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d8c:	480b      	ldr	r0, [pc, #44]	; (8005dbc <prvInitialiseTaskLists+0x74>)
 8005d8e:	f7fe fc33 	bl	80045f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d92:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <prvInitialiseTaskLists+0x78>)
 8005d94:	4a05      	ldr	r2, [pc, #20]	; (8005dac <prvInitialiseTaskLists+0x64>)
 8005d96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d98:	4b0a      	ldr	r3, [pc, #40]	; (8005dc4 <prvInitialiseTaskLists+0x7c>)
 8005d9a:	4a05      	ldr	r2, [pc, #20]	; (8005db0 <prvInitialiseTaskLists+0x68>)
 8005d9c:	601a      	str	r2, [r3, #0]
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000848 	.word	0x20000848
 8005dac:	20000ca8 	.word	0x20000ca8
 8005db0:	20000cbc 	.word	0x20000cbc
 8005db4:	20000cd8 	.word	0x20000cd8
 8005db8:	20000cec 	.word	0x20000cec
 8005dbc:	20000d04 	.word	0x20000d04
 8005dc0:	20000cd0 	.word	0x20000cd0
 8005dc4:	20000cd4 	.word	0x20000cd4

08005dc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dce:	e019      	b.n	8005e04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005dd0:	f000 fd5c 	bl	800688c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005dd4:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <prvCheckTasksWaitingTermination+0x50>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fc8f 	bl	8004704 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005de6:	4b0d      	ldr	r3, [pc, #52]	; (8005e1c <prvCheckTasksWaitingTermination+0x54>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	4a0b      	ldr	r2, [pc, #44]	; (8005e1c <prvCheckTasksWaitingTermination+0x54>)
 8005dee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <prvCheckTasksWaitingTermination+0x58>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3b01      	subs	r3, #1
 8005df6:	4a0a      	ldr	r2, [pc, #40]	; (8005e20 <prvCheckTasksWaitingTermination+0x58>)
 8005df8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005dfa:	f000 fd77 	bl	80068ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 f810 	bl	8005e24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e04:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <prvCheckTasksWaitingTermination+0x58>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e1      	bne.n	8005dd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	3708      	adds	r7, #8
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000cec 	.word	0x20000cec
 8005e1c:	20000d18 	.word	0x20000d18
 8005e20:	20000d00 	.word	0x20000d00

08005e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d108      	bne.n	8005e48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 feea 	bl	8006c14 <vPortFree>
				vPortFree( pxTCB );
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fee7 	bl	8006c14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e46:	e018      	b.n	8005e7a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d103      	bne.n	8005e5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fede 	bl	8006c14 <vPortFree>
	}
 8005e58:	e00f      	b.n	8005e7a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d00a      	beq.n	8005e7a <prvDeleteTCB+0x56>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60fb      	str	r3, [r7, #12]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <prvDeleteTCB+0x54>
	}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e8a:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <prvResetNextTaskUnblockTime+0x40>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <prvResetNextTaskUnblockTime+0x14>
 8005e94:	2301      	movs	r3, #1
 8005e96:	e000      	b.n	8005e9a <prvResetNextTaskUnblockTime+0x16>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e9e:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <prvResetNextTaskUnblockTime+0x44>)
 8005ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ea6:	e008      	b.n	8005eba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <prvResetNextTaskUnblockTime+0x40>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <prvResetNextTaskUnblockTime+0x44>)
 8005eb8:	6013      	str	r3, [r2, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	20000cd0 	.word	0x20000cd0
 8005ec8:	20000d38 	.word	0x20000d38

08005ecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <xTaskGetSchedulerState+0x34>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eda:	2301      	movs	r3, #1
 8005edc:	607b      	str	r3, [r7, #4]
 8005ede:	e008      	b.n	8005ef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ee0:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <xTaskGetSchedulerState+0x38>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	e001      	b.n	8005ef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ef2:	687b      	ldr	r3, [r7, #4]
	}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	20000d24 	.word	0x20000d24
 8005f04:	20000d40 	.word	0x20000d40

08005f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d056      	beq.n	8005fcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f1e:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <xTaskPriorityDisinherit+0xd0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d00a      	beq.n	8005f3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	60fb      	str	r3, [r7, #12]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60bb      	str	r3, [r7, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d02c      	beq.n	8005fcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d128      	bne.n	8005fcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fbc0 	bl	8004704 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <xTaskPriorityDisinherit+0xd4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d903      	bls.n	8005fac <xTaskPriorityDisinherit+0xa4>
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	4a0c      	ldr	r2, [pc, #48]	; (8005fdc <xTaskPriorityDisinherit+0xd4>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <xTaskPriorityDisinherit+0xd8>)
 8005fba:	441a      	add	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe fb43 	bl	800464e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fcc:	697b      	ldr	r3, [r7, #20]
	}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000844 	.word	0x20000844
 8005fdc:	20000d20 	.word	0x20000d20
 8005fe0:	20000848 	.word	0x20000848

08005fe4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fee:	4b21      	ldr	r3, [pc, #132]	; (8006074 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff4:	4b20      	ldr	r3, [pc, #128]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fb82 	bl	8004704 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006006:	d10a      	bne.n	800601e <prvAddCurrentTaskToDelayedList+0x3a>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800600e:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4819      	ldr	r0, [pc, #100]	; (800607c <prvAddCurrentTaskToDelayedList+0x98>)
 8006018:	f7fe fb19 	bl	800464e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800601c:	e026      	b.n	800606c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	429a      	cmp	r2, r3
 8006034:	d209      	bcs.n	800604a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fe fb26 	bl	8004694 <vListInsert>
}
 8006048:	e010      	b.n	800606c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604a:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <prvAddCurrentTaskToDelayedList+0xa0>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f7fe fb1c 	bl	8004694 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <prvAddCurrentTaskToDelayedList+0xa4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d202      	bcs.n	800606c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006066:	4a08      	ldr	r2, [pc, #32]	; (8006088 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6013      	str	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000d1c 	.word	0x20000d1c
 8006078:	20000844 	.word	0x20000844
 800607c:	20000d04 	.word	0x20000d04
 8006080:	20000cd4 	.word	0x20000cd4
 8006084:	20000cd0 	.word	0x20000cd0
 8006088:	20000d38 	.word	0x20000d38

0800608c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006096:	f000 facb 	bl	8006630 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800609a:	4b1c      	ldr	r3, [pc, #112]	; (800610c <xTimerCreateTimerTask+0x80>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d021      	beq.n	80060e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060aa:	1d3a      	adds	r2, r7, #4
 80060ac:	f107 0108 	add.w	r1, r7, #8
 80060b0:	f107 030c 	add.w	r3, r7, #12
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe fa85 	bl	80045c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	9202      	str	r2, [sp, #8]
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	2302      	movs	r3, #2
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2300      	movs	r3, #0
 80060ca:	460a      	mov	r2, r1
 80060cc:	4910      	ldr	r1, [pc, #64]	; (8006110 <xTimerCreateTimerTask+0x84>)
 80060ce:	4811      	ldr	r0, [pc, #68]	; (8006114 <xTimerCreateTimerTask+0x88>)
 80060d0:	f7ff f8e4 	bl	800529c <xTaskCreateStatic>
 80060d4:	4603      	mov	r3, r0
 80060d6:	4a10      	ldr	r2, [pc, #64]	; (8006118 <xTimerCreateTimerTask+0x8c>)
 80060d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060da:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <xTimerCreateTimerTask+0x8c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060e2:	2301      	movs	r3, #1
 80060e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	613b      	str	r3, [r7, #16]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006102:	697b      	ldr	r3, [r7, #20]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20000d74 	.word	0x20000d74
 8006110:	08006f88 	.word	0x08006f88
 8006114:	08006239 	.word	0x08006239
 8006118:	20000d78 	.word	0x20000d78

0800611c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	; 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	623b      	str	r3, [r7, #32]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800614a:	4b1a      	ldr	r3, [pc, #104]	; (80061b4 <xTimerGenericCommand+0x98>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d02a      	beq.n	80061a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b05      	cmp	r3, #5
 8006162:	dc18      	bgt.n	8006196 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006164:	f7ff feb2 	bl	8005ecc <xTaskGetSchedulerState>
 8006168:	4603      	mov	r3, r0
 800616a:	2b02      	cmp	r3, #2
 800616c:	d109      	bne.n	8006182 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800616e:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <xTimerGenericCommand+0x98>)
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	f107 0110 	add.w	r1, r7, #16
 8006176:	2300      	movs	r3, #0
 8006178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617a:	f7fe fc2d 	bl	80049d8 <xQueueGenericSend>
 800617e:	6278      	str	r0, [r7, #36]	; 0x24
 8006180:	e012      	b.n	80061a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006182:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <xTimerGenericCommand+0x98>)
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f107 0110 	add.w	r1, r7, #16
 800618a:	2300      	movs	r3, #0
 800618c:	2200      	movs	r2, #0
 800618e:	f7fe fc23 	bl	80049d8 <xQueueGenericSend>
 8006192:	6278      	str	r0, [r7, #36]	; 0x24
 8006194:	e008      	b.n	80061a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <xTimerGenericCommand+0x98>)
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	f107 0110 	add.w	r1, r7, #16
 800619e:	2300      	movs	r3, #0
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	f7fe fd17 	bl	8004bd4 <xQueueGenericSendFromISR>
 80061a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3728      	adds	r7, #40	; 0x28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000d74 	.word	0x20000d74

080061b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061c2:	4b1c      	ldr	r3, [pc, #112]	; (8006234 <prvProcessExpiredTimer+0x7c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe fa97 	bl	8004704 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d122      	bne.n	8006224 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	18d1      	adds	r1, r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	6978      	ldr	r0, [r7, #20]
 80061ec:	f000 f8c8 	bl	8006380 <prvInsertTimerInActiveList>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d016      	beq.n	8006224 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061f6:	2300      	movs	r3, #0
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	2300      	movs	r3, #0
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	2100      	movs	r1, #0
 8006200:	6978      	ldr	r0, [r7, #20]
 8006202:	f7ff ff8b 	bl	800611c <xTimerGenericCommand>
 8006206:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10a      	bne.n	8006224 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	60fb      	str	r3, [r7, #12]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	6978      	ldr	r0, [r7, #20]
 800622a:	4798      	blx	r3
}
 800622c:	bf00      	nop
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	20000d6c 	.word	0x20000d6c

08006238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006240:	f107 0308 	add.w	r3, r7, #8
 8006244:	4618      	mov	r0, r3
 8006246:	f000 f857 	bl	80062f8 <prvGetNextExpireTime>
 800624a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4619      	mov	r1, r3
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f803 	bl	800625c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006256:	f000 f8d5 	bl	8006404 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800625a:	e7f1      	b.n	8006240 <prvTimerTask+0x8>

0800625c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006266:	f7ff fa4b 	bl	8005700 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f000 f866 	bl	8006340 <prvSampleTimeNow>
 8006274:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d130      	bne.n	80062de <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10a      	bne.n	8006298 <prvProcessTimerOrBlockTask+0x3c>
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	429a      	cmp	r2, r3
 8006288:	d806      	bhi.n	8006298 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800628a:	f7ff fa47 	bl	800571c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800628e:	68f9      	ldr	r1, [r7, #12]
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff ff91 	bl	80061b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006296:	e024      	b.n	80062e2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d008      	beq.n	80062b0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800629e:	4b13      	ldr	r3, [pc, #76]	; (80062ec <prvProcessTimerOrBlockTask+0x90>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	bf0c      	ite	eq
 80062a8:	2301      	moveq	r3, #1
 80062aa:	2300      	movne	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062b0:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <prvProcessTimerOrBlockTask+0x94>)
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	4619      	mov	r1, r3
 80062be:	f7fe ffb9 	bl	8005234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062c2:	f7ff fa2b 	bl	800571c <xTaskResumeAll>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062cc:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <prvProcessTimerOrBlockTask+0x98>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	f3bf 8f6f 	isb	sy
}
 80062dc:	e001      	b.n	80062e2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062de:	f7ff fa1d 	bl	800571c <xTaskResumeAll>
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000d70 	.word	0x20000d70
 80062f0:	20000d74 	.word	0x20000d74
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006300:	4b0e      	ldr	r3, [pc, #56]	; (800633c <prvGetNextExpireTime+0x44>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2b00      	cmp	r3, #0
 8006308:	bf0c      	ite	eq
 800630a:	2301      	moveq	r3, #1
 800630c:	2300      	movne	r3, #0
 800630e:	b2db      	uxtb	r3, r3
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800631e:	4b07      	ldr	r3, [pc, #28]	; (800633c <prvGetNextExpireTime+0x44>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	e001      	b.n	800632e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800632e:	68fb      	ldr	r3, [r7, #12]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000d6c 	.word	0x20000d6c

08006340 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006348:	f7ff fa86 	bl	8005858 <xTaskGetTickCount>
 800634c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800634e:	4b0b      	ldr	r3, [pc, #44]	; (800637c <prvSampleTimeNow+0x3c>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	429a      	cmp	r2, r3
 8006356:	d205      	bcs.n	8006364 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006358:	f000 f908 	bl	800656c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	e002      	b.n	800636a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800636a:	4a04      	ldr	r2, [pc, #16]	; (800637c <prvSampleTimeNow+0x3c>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006370:	68fb      	ldr	r3, [r7, #12]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000d7c 	.word	0x20000d7c

08006380 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
 800638c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d812      	bhi.n	80063cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d302      	bcc.n	80063ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	e01b      	b.n	80063f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063ba:	4b10      	ldr	r3, [pc, #64]	; (80063fc <prvInsertTimerInActiveList+0x7c>)
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f7fe f965 	bl	8004694 <vListInsert>
 80063ca:	e012      	b.n	80063f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d206      	bcs.n	80063e2 <prvInsertTimerInActiveList+0x62>
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d302      	bcc.n	80063e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063dc:	2301      	movs	r3, #1
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e007      	b.n	80063f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063e2:	4b07      	ldr	r3, [pc, #28]	; (8006400 <prvInsertTimerInActiveList+0x80>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4619      	mov	r1, r3
 80063ec:	4610      	mov	r0, r2
 80063ee:	f7fe f951 	bl	8004694 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063f2:	697b      	ldr	r3, [r7, #20]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000d70 	.word	0x20000d70
 8006400:	20000d6c 	.word	0x20000d6c

08006404 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08e      	sub	sp, #56	; 0x38
 8006408:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800640a:	e09d      	b.n	8006548 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	da18      	bge.n	8006444 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006412:	1d3b      	adds	r3, r7, #4
 8006414:	3304      	adds	r3, #4
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	61fb      	str	r3, [r7, #28]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800643a:	6850      	ldr	r0, [r2, #4]
 800643c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800643e:	6892      	ldr	r2, [r2, #8]
 8006440:	4611      	mov	r1, r2
 8006442:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	db7d      	blt.n	8006546 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe f952 	bl	8004704 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006460:	463b      	mov	r3, r7
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff ff6c 	bl	8006340 <prvSampleTimeNow>
 8006468:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b09      	cmp	r3, #9
 800646e:	d86b      	bhi.n	8006548 <prvProcessReceivedCommands+0x144>
 8006470:	a201      	add	r2, pc, #4	; (adr r2, 8006478 <prvProcessReceivedCommands+0x74>)
 8006472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006476:	bf00      	nop
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064a1 	.word	0x080064a1
 8006484:	08006549 	.word	0x08006549
 8006488:	080064fd 	.word	0x080064fd
 800648c:	08006535 	.word	0x08006535
 8006490:	080064a1 	.word	0x080064a1
 8006494:	080064a1 	.word	0x080064a1
 8006498:	08006549 	.word	0x08006549
 800649c:	080064fd 	.word	0x080064fd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a4:	699b      	ldr	r3, [r3, #24]
 80064a6:	18d1      	adds	r1, r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ae:	f7ff ff67 	bl	8006380 <prvInsertTimerInActiveList>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d047      	beq.n	8006548 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064be:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d13f      	bne.n	8006548 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	441a      	add	r2, r3
 80064d0:	2300      	movs	r3, #0
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	2300      	movs	r3, #0
 80064d6:	2100      	movs	r1, #0
 80064d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064da:	f7ff fe1f 	bl	800611c <xTimerGenericCommand>
 80064de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d130      	bne.n	8006548 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80064e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ea:	f383 8811 	msr	BASEPRI, r3
 80064ee:	f3bf 8f6f 	isb	sy
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	61bb      	str	r3, [r7, #24]
}
 80064f8:	bf00      	nop
 80064fa:	e7fe      	b.n	80064fa <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	617b      	str	r3, [r7, #20]
}
 800651c:	bf00      	nop
 800651e:	e7fe      	b.n	800651e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	699a      	ldr	r2, [r3, #24]
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	18d1      	adds	r1, r2, r3
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800652c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652e:	f7ff ff27 	bl	8006380 <prvInsertTimerInActiveList>
					break;
 8006532:	e009      	b.n	8006548 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d104      	bne.n	8006548 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800653e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006540:	f000 fb68 	bl	8006c14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006544:	e000      	b.n	8006548 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006546:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <prvProcessReceivedCommands+0x164>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	1d39      	adds	r1, r7, #4
 800654e:	2200      	movs	r2, #0
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fbd7 	bl	8004d04 <xQueueReceive>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	f47f af57 	bne.w	800640c <prvProcessReceivedCommands+0x8>
	}
}
 800655e:	bf00      	nop
 8006560:	bf00      	nop
 8006562:	3730      	adds	r7, #48	; 0x30
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20000d74 	.word	0x20000d74

0800656c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b088      	sub	sp, #32
 8006570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006572:	e045      	b.n	8006600 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006574:	4b2c      	ldr	r3, [pc, #176]	; (8006628 <prvSwitchTimerLists+0xbc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800657e:	4b2a      	ldr	r3, [pc, #168]	; (8006628 <prvSwitchTimerLists+0xbc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3304      	adds	r3, #4
 800658c:	4618      	mov	r0, r3
 800658e:	f7fe f8b9 	bl	8004704 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d12e      	bne.n	8006600 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4413      	add	r3, r2
 80065aa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d90e      	bls.n	80065d2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065c0:	4b19      	ldr	r3, [pc, #100]	; (8006628 <prvSwitchTimerLists+0xbc>)
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3304      	adds	r3, #4
 80065c8:	4619      	mov	r1, r3
 80065ca:	4610      	mov	r0, r2
 80065cc:	f7fe f862 	bl	8004694 <vListInsert>
 80065d0:	e016      	b.n	8006600 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065d2:	2300      	movs	r3, #0
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	2300      	movs	r3, #0
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	2100      	movs	r1, #0
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7ff fd9d 	bl	800611c <xTimerGenericCommand>
 80065e2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d10a      	bne.n	8006600 <prvSwitchTimerLists+0x94>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006600:	4b09      	ldr	r3, [pc, #36]	; (8006628 <prvSwitchTimerLists+0xbc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1b4      	bne.n	8006574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <prvSwitchTimerLists+0xbc>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <prvSwitchTimerLists+0xc0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a04      	ldr	r2, [pc, #16]	; (8006628 <prvSwitchTimerLists+0xbc>)
 8006616:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006618:	4a04      	ldr	r2, [pc, #16]	; (800662c <prvSwitchTimerLists+0xc0>)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	6013      	str	r3, [r2, #0]
}
 800661e:	bf00      	nop
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20000d6c 	.word	0x20000d6c
 800662c:	20000d70 	.word	0x20000d70

08006630 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006636:	f000 f929 	bl	800688c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800663a:	4b15      	ldr	r3, [pc, #84]	; (8006690 <prvCheckForValidListAndQueue+0x60>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d120      	bne.n	8006684 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006642:	4814      	ldr	r0, [pc, #80]	; (8006694 <prvCheckForValidListAndQueue+0x64>)
 8006644:	f7fd ffd8 	bl	80045f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006648:	4813      	ldr	r0, [pc, #76]	; (8006698 <prvCheckForValidListAndQueue+0x68>)
 800664a:	f7fd ffd5 	bl	80045f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800664e:	4b13      	ldr	r3, [pc, #76]	; (800669c <prvCheckForValidListAndQueue+0x6c>)
 8006650:	4a10      	ldr	r2, [pc, #64]	; (8006694 <prvCheckForValidListAndQueue+0x64>)
 8006652:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006654:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <prvCheckForValidListAndQueue+0x70>)
 8006656:	4a10      	ldr	r2, [pc, #64]	; (8006698 <prvCheckForValidListAndQueue+0x68>)
 8006658:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800665a:	2300      	movs	r3, #0
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	4b11      	ldr	r3, [pc, #68]	; (80066a4 <prvCheckForValidListAndQueue+0x74>)
 8006660:	4a11      	ldr	r2, [pc, #68]	; (80066a8 <prvCheckForValidListAndQueue+0x78>)
 8006662:	2110      	movs	r1, #16
 8006664:	200a      	movs	r0, #10
 8006666:	f7fe f8df 	bl	8004828 <xQueueGenericCreateStatic>
 800666a:	4603      	mov	r3, r0
 800666c:	4a08      	ldr	r2, [pc, #32]	; (8006690 <prvCheckForValidListAndQueue+0x60>)
 800666e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <prvCheckForValidListAndQueue+0x60>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <prvCheckForValidListAndQueue+0x60>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	490b      	ldr	r1, [pc, #44]	; (80066ac <prvCheckForValidListAndQueue+0x7c>)
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fdb0 	bl	80051e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006684:	f000 f932 	bl	80068ec <vPortExitCritical>
}
 8006688:	bf00      	nop
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000d74 	.word	0x20000d74
 8006694:	20000d44 	.word	0x20000d44
 8006698:	20000d58 	.word	0x20000d58
 800669c:	20000d6c 	.word	0x20000d6c
 80066a0:	20000d70 	.word	0x20000d70
 80066a4:	20000e20 	.word	0x20000e20
 80066a8:	20000d80 	.word	0x20000d80
 80066ac:	08006f90 	.word	0x08006f90

080066b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3b04      	subs	r3, #4
 80066c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	3b04      	subs	r3, #4
 80066ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f023 0201 	bic.w	r2, r3, #1
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3b04      	subs	r3, #4
 80066de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066e0:	4a08      	ldr	r2, [pc, #32]	; (8006704 <pxPortInitialiseStack+0x54>)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3b14      	subs	r3, #20
 80066ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3b20      	subs	r3, #32
 80066f6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066f8:	68fb      	ldr	r3, [r7, #12]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bc80      	pop	{r7}
 8006702:	4770      	bx	lr
 8006704:	08006709 	.word	0x08006709

08006708 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800670e:	2300      	movs	r3, #0
 8006710:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006712:	4b12      	ldr	r3, [pc, #72]	; (800675c <prvTaskExitError+0x54>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800671a:	d00a      	beq.n	8006732 <prvTaskExitError+0x2a>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	60fb      	str	r3, [r7, #12]
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <prvTaskExitError+0x28>
	__asm volatile
 8006732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006736:	f383 8811 	msr	BASEPRI, r3
 800673a:	f3bf 8f6f 	isb	sy
 800673e:	f3bf 8f4f 	dsb	sy
 8006742:	60bb      	str	r3, [r7, #8]
}
 8006744:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006746:	bf00      	nop
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d0fc      	beq.n	8006748 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	2000000c 	.word	0x2000000c

08006760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006760:	4b07      	ldr	r3, [pc, #28]	; (8006780 <pxCurrentTCBConst2>)
 8006762:	6819      	ldr	r1, [r3, #0]
 8006764:	6808      	ldr	r0, [r1, #0]
 8006766:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800676a:	f380 8809 	msr	PSP, r0
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f380 8811 	msr	BASEPRI, r0
 800677a:	f04e 0e0d 	orr.w	lr, lr, #13
 800677e:	4770      	bx	lr

08006780 <pxCurrentTCBConst2>:
 8006780:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006784:	bf00      	nop
 8006786:	bf00      	nop

08006788 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006788:	4806      	ldr	r0, [pc, #24]	; (80067a4 <prvPortStartFirstTask+0x1c>)
 800678a:	6800      	ldr	r0, [r0, #0]
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	f380 8808 	msr	MSP, r0
 8006792:	b662      	cpsie	i
 8006794:	b661      	cpsie	f
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	df00      	svc	0
 80067a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067a2:	bf00      	nop
 80067a4:	e000ed08 	.word	0xe000ed08

080067a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067ae:	4b32      	ldr	r3, [pc, #200]	; (8006878 <xPortStartScheduler+0xd0>)
 80067b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	22ff      	movs	r2, #255	; 0xff
 80067be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4b2a      	ldr	r3, [pc, #168]	; (800687c <xPortStartScheduler+0xd4>)
 80067d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067d6:	4b2a      	ldr	r3, [pc, #168]	; (8006880 <xPortStartScheduler+0xd8>)
 80067d8:	2207      	movs	r2, #7
 80067da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067dc:	e009      	b.n	80067f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80067de:	4b28      	ldr	r3, [pc, #160]	; (8006880 <xPortStartScheduler+0xd8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	4a26      	ldr	r2, [pc, #152]	; (8006880 <xPortStartScheduler+0xd8>)
 80067e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d0ef      	beq.n	80067de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067fe:	4b20      	ldr	r3, [pc, #128]	; (8006880 <xPortStartScheduler+0xd8>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f1c3 0307 	rsb	r3, r3, #7
 8006806:	2b04      	cmp	r3, #4
 8006808:	d00a      	beq.n	8006820 <xPortStartScheduler+0x78>
	__asm volatile
 800680a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800680e:	f383 8811 	msr	BASEPRI, r3
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	60bb      	str	r3, [r7, #8]
}
 800681c:	bf00      	nop
 800681e:	e7fe      	b.n	800681e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006820:	4b17      	ldr	r3, [pc, #92]	; (8006880 <xPortStartScheduler+0xd8>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	4a16      	ldr	r2, [pc, #88]	; (8006880 <xPortStartScheduler+0xd8>)
 8006828:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800682a:	4b15      	ldr	r3, [pc, #84]	; (8006880 <xPortStartScheduler+0xd8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006832:	4a13      	ldr	r2, [pc, #76]	; (8006880 <xPortStartScheduler+0xd8>)
 8006834:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	b2da      	uxtb	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800683e:	4b11      	ldr	r3, [pc, #68]	; (8006884 <xPortStartScheduler+0xdc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a10      	ldr	r2, [pc, #64]	; (8006884 <xPortStartScheduler+0xdc>)
 8006844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006848:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800684a:	4b0e      	ldr	r3, [pc, #56]	; (8006884 <xPortStartScheduler+0xdc>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a0d      	ldr	r2, [pc, #52]	; (8006884 <xPortStartScheduler+0xdc>)
 8006850:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006854:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006856:	f000 f8b9 	bl	80069cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800685a:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <xPortStartScheduler+0xe0>)
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006860:	f7ff ff92 	bl	8006788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006864:	f7ff f8c4 	bl	80059f0 <vTaskSwitchContext>
	prvTaskExitError();
 8006868:	f7ff ff4e 	bl	8006708 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	e000e400 	.word	0xe000e400
 800687c:	20000e70 	.word	0x20000e70
 8006880:	20000e74 	.word	0x20000e74
 8006884:	e000ed20 	.word	0xe000ed20
 8006888:	2000000c 	.word	0x2000000c

0800688c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
	__asm volatile
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	f383 8811 	msr	BASEPRI, r3
 800689a:	f3bf 8f6f 	isb	sy
 800689e:	f3bf 8f4f 	dsb	sy
 80068a2:	607b      	str	r3, [r7, #4]
}
 80068a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068a6:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <vPortEnterCritical+0x58>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	4a0d      	ldr	r2, [pc, #52]	; (80068e4 <vPortEnterCritical+0x58>)
 80068ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068b0:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <vPortEnterCritical+0x58>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d10f      	bne.n	80068d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <vPortEnterCritical+0x5c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00a      	beq.n	80068d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	603b      	str	r3, [r7, #0]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <vPortEnterCritical+0x4a>
	}
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	2000000c 	.word	0x2000000c
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068f2:	4b11      	ldr	r3, [pc, #68]	; (8006938 <vPortExitCritical+0x4c>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10a      	bne.n	8006910 <vPortExitCritical+0x24>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	607b      	str	r3, [r7, #4]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006910:	4b09      	ldr	r3, [pc, #36]	; (8006938 <vPortExitCritical+0x4c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3b01      	subs	r3, #1
 8006916:	4a08      	ldr	r2, [pc, #32]	; (8006938 <vPortExitCritical+0x4c>)
 8006918:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <vPortExitCritical+0x4c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d105      	bne.n	800692e <vPortExitCritical+0x42>
 8006922:	2300      	movs	r3, #0
 8006924:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f383 8811 	msr	BASEPRI, r3
}
 800692c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	bc80      	pop	{r7}
 8006936:	4770      	bx	lr
 8006938:	2000000c 	.word	0x2000000c
 800693c:	00000000 	.word	0x00000000

08006940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006940:	f3ef 8009 	mrs	r0, PSP
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <pxCurrentTCBConst>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006950:	6010      	str	r0, [r2, #0]
 8006952:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006956:	f04f 0050 	mov.w	r0, #80	; 0x50
 800695a:	f380 8811 	msr	BASEPRI, r0
 800695e:	f7ff f847 	bl	80059f0 <vTaskSwitchContext>
 8006962:	f04f 0000 	mov.w	r0, #0
 8006966:	f380 8811 	msr	BASEPRI, r0
 800696a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800696e:	6819      	ldr	r1, [r3, #0]
 8006970:	6808      	ldr	r0, [r1, #0]
 8006972:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006976:	f380 8809 	msr	PSP, r0
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	4770      	bx	lr

08006980 <pxCurrentTCBConst>:
 8006980:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop

08006988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
	__asm volatile
 800698e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006992:	f383 8811 	msr	BASEPRI, r3
 8006996:	f3bf 8f6f 	isb	sy
 800699a:	f3bf 8f4f 	dsb	sy
 800699e:	607b      	str	r3, [r7, #4]
}
 80069a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069a2:	f7fe ff67 	bl	8005874 <xTaskIncrementTick>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <SysTick_Handler+0x40>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f383 8811 	msr	BASEPRI, r3
}
 80069be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069c0:	bf00      	nop
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069d0:	4b0a      	ldr	r3, [pc, #40]	; (80069fc <vPortSetupTimerInterrupt+0x30>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069d6:	4b0a      	ldr	r3, [pc, #40]	; (8006a00 <vPortSetupTimerInterrupt+0x34>)
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069dc:	4b09      	ldr	r3, [pc, #36]	; (8006a04 <vPortSetupTimerInterrupt+0x38>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a09      	ldr	r2, [pc, #36]	; (8006a08 <vPortSetupTimerInterrupt+0x3c>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	099b      	lsrs	r3, r3, #6
 80069e8:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <vPortSetupTimerInterrupt+0x40>)
 80069ea:	3b01      	subs	r3, #1
 80069ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069ee:	4b03      	ldr	r3, [pc, #12]	; (80069fc <vPortSetupTimerInterrupt+0x30>)
 80069f0:	2207      	movs	r2, #7
 80069f2:	601a      	str	r2, [r3, #0]
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr
 80069fc:	e000e010 	.word	0xe000e010
 8006a00:	e000e018 	.word	0xe000e018
 8006a04:	20000000 	.word	0x20000000
 8006a08:	10624dd3 	.word	0x10624dd3
 8006a0c:	e000e014 	.word	0xe000e014

08006a10 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a16:	f3ef 8305 	mrs	r3, IPSR
 8006a1a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b0f      	cmp	r3, #15
 8006a20:	d914      	bls.n	8006a4c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a22:	4a16      	ldr	r2, [pc, #88]	; (8006a7c <vPortValidateInterruptPriority+0x6c>)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	4413      	add	r3, r2
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a2c:	4b14      	ldr	r3, [pc, #80]	; (8006a80 <vPortValidateInterruptPriority+0x70>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	7afa      	ldrb	r2, [r7, #11]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d20a      	bcs.n	8006a4c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	607b      	str	r3, [r7, #4]
}
 8006a48:	bf00      	nop
 8006a4a:	e7fe      	b.n	8006a4a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a4c:	4b0d      	ldr	r3, [pc, #52]	; (8006a84 <vPortValidateInterruptPriority+0x74>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a54:	4b0c      	ldr	r3, [pc, #48]	; (8006a88 <vPortValidateInterruptPriority+0x78>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d90a      	bls.n	8006a72 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	603b      	str	r3, [r7, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <vPortValidateInterruptPriority+0x60>
	}
 8006a72:	bf00      	nop
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr
 8006a7c:	e000e3f0 	.word	0xe000e3f0
 8006a80:	20000e70 	.word	0x20000e70
 8006a84:	e000ed0c 	.word	0xe000ed0c
 8006a88:	20000e74 	.word	0x20000e74

08006a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b08a      	sub	sp, #40	; 0x28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a98:	f7fe fe32 	bl	8005700 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a9c:	4b58      	ldr	r3, [pc, #352]	; (8006c00 <pvPortMalloc+0x174>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006aa4:	f000 f910 	bl	8006cc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006aa8:	4b56      	ldr	r3, [pc, #344]	; (8006c04 <pvPortMalloc+0x178>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f040 808e 	bne.w	8006bd2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01d      	beq.n	8006af8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006abc:	2208      	movs	r2, #8
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d014      	beq.n	8006af8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f023 0307 	bic.w	r3, r3, #7
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <pvPortMalloc+0x6c>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	617b      	str	r3, [r7, #20]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d069      	beq.n	8006bd2 <pvPortMalloc+0x146>
 8006afe:	4b42      	ldr	r3, [pc, #264]	; (8006c08 <pvPortMalloc+0x17c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d864      	bhi.n	8006bd2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b08:	4b40      	ldr	r3, [pc, #256]	; (8006c0c <pvPortMalloc+0x180>)
 8006b0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b0c:	4b3f      	ldr	r3, [pc, #252]	; (8006c0c <pvPortMalloc+0x180>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b12:	e004      	b.n	8006b1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d903      	bls.n	8006b30 <pvPortMalloc+0xa4>
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1f1      	bne.n	8006b14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b30:	4b33      	ldr	r3, [pc, #204]	; (8006c00 <pvPortMalloc+0x174>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d04b      	beq.n	8006bd2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b3a:	6a3b      	ldr	r3, [r7, #32]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2208      	movs	r2, #8
 8006b40:	4413      	add	r3, r2
 8006b42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	1ad2      	subs	r2, r2, r3
 8006b54:	2308      	movs	r3, #8
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d91f      	bls.n	8006b9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4413      	add	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <pvPortMalloc+0xf8>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	613b      	str	r3, [r7, #16]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	1ad2      	subs	r2, r2, r3
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b96:	69b8      	ldr	r0, [r7, #24]
 8006b98:	f000 f8f8 	bl	8006d8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b9c:	4b1a      	ldr	r3, [pc, #104]	; (8006c08 <pvPortMalloc+0x17c>)
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	4a18      	ldr	r2, [pc, #96]	; (8006c08 <pvPortMalloc+0x17c>)
 8006ba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006baa:	4b17      	ldr	r3, [pc, #92]	; (8006c08 <pvPortMalloc+0x17c>)
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b18      	ldr	r3, [pc, #96]	; (8006c10 <pvPortMalloc+0x184>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d203      	bcs.n	8006bbe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bb6:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <pvPortMalloc+0x17c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <pvPortMalloc+0x184>)
 8006bbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <pvPortMalloc+0x178>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bd2:	f7fe fda3 	bl	800571c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <pvPortMalloc+0x16a>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60fb      	str	r3, [r7, #12]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <pvPortMalloc+0x168>
	return pvReturn;
 8006bf6:	69fb      	ldr	r3, [r7, #28]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3728      	adds	r7, #40	; 0x28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20001e80 	.word	0x20001e80
 8006c04:	20001e8c 	.word	0x20001e8c
 8006c08:	20001e84 	.word	0x20001e84
 8006c0c:	20001e78 	.word	0x20001e78
 8006c10:	20001e88 	.word	0x20001e88

08006c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d048      	beq.n	8006cb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c26:	2308      	movs	r3, #8
 8006c28:	425b      	negs	r3, r3
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <vPortFree+0xac>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10a      	bne.n	8006c58 <vPortFree+0x44>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	60fb      	str	r3, [r7, #12]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <vPortFree+0x62>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60bb      	str	r3, [r7, #8]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <vPortFree+0xac>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d019      	beq.n	8006cb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d115      	bne.n	8006cb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <vPortFree+0xac>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	43db      	mvns	r3, r3
 8006c96:	401a      	ands	r2, r3
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c9c:	f7fe fd30 	bl	8005700 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <vPortFree+0xb0>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4413      	add	r3, r2
 8006caa:	4a06      	ldr	r2, [pc, #24]	; (8006cc4 <vPortFree+0xb0>)
 8006cac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cae:	6938      	ldr	r0, [r7, #16]
 8006cb0:	f000 f86c 	bl	8006d8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006cb4:	f7fe fd32 	bl	800571c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cb8:	bf00      	nop
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	20001e8c 	.word	0x20001e8c
 8006cc4:	20001e84 	.word	0x20001e84

08006cc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <prvHeapInit+0xac>)
 8006cd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f003 0307 	and.w	r3, r3, #7
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00c      	beq.n	8006cfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	3307      	adds	r3, #7
 8006ce6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0307 	bic.w	r3, r3, #7
 8006cee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cf0:	68ba      	ldr	r2, [r7, #8]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	4a1f      	ldr	r2, [pc, #124]	; (8006d74 <prvHeapInit+0xac>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d00:	4a1d      	ldr	r2, [pc, #116]	; (8006d78 <prvHeapInit+0xb0>)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d06:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <prvHeapInit+0xb0>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d14:	2208      	movs	r2, #8
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1a9b      	subs	r3, r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f023 0307 	bic.w	r3, r3, #7
 8006d22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4a15      	ldr	r2, [pc, #84]	; (8006d7c <prvHeapInit+0xb4>)
 8006d28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d2a:	4b14      	ldr	r3, [pc, #80]	; (8006d7c <prvHeapInit+0xb4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d32:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <prvHeapInit+0xb4>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	1ad2      	subs	r2, r2, r3
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <prvHeapInit+0xb4>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	4a0a      	ldr	r2, [pc, #40]	; (8006d80 <prvHeapInit+0xb8>)
 8006d56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	4a09      	ldr	r2, [pc, #36]	; (8006d84 <prvHeapInit+0xbc>)
 8006d5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d60:	4b09      	ldr	r3, [pc, #36]	; (8006d88 <prvHeapInit+0xc0>)
 8006d62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d66:	601a      	str	r2, [r3, #0]
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	20000e78 	.word	0x20000e78
 8006d78:	20001e78 	.word	0x20001e78
 8006d7c:	20001e80 	.word	0x20001e80
 8006d80:	20001e88 	.word	0x20001e88
 8006d84:	20001e84 	.word	0x20001e84
 8006d88:	20001e8c 	.word	0x20001e8c

08006d8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d94:	4b27      	ldr	r3, [pc, #156]	; (8006e34 <prvInsertBlockIntoFreeList+0xa8>)
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	e002      	b.n	8006da0 <prvInsertBlockIntoFreeList+0x14>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d8f7      	bhi.n	8006d9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	4413      	add	r3, r2
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d108      	bne.n	8006dce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	441a      	add	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	441a      	add	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d118      	bne.n	8006e14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <prvInsertBlockIntoFreeList+0xac>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d00d      	beq.n	8006e0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	441a      	add	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	e008      	b.n	8006e1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e0a:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <prvInsertBlockIntoFreeList+0xac>)
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	e003      	b.n	8006e1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d002      	beq.n	8006e2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr
 8006e34:	20001e78 	.word	0x20001e78
 8006e38:	20001e80 	.word	0x20001e80

08006e3c <__libc_init_array>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	2600      	movs	r6, #0
 8006e40:	4d0c      	ldr	r5, [pc, #48]	; (8006e74 <__libc_init_array+0x38>)
 8006e42:	4c0d      	ldr	r4, [pc, #52]	; (8006e78 <__libc_init_array+0x3c>)
 8006e44:	1b64      	subs	r4, r4, r5
 8006e46:	10a4      	asrs	r4, r4, #2
 8006e48:	42a6      	cmp	r6, r4
 8006e4a:	d109      	bne.n	8006e60 <__libc_init_array+0x24>
 8006e4c:	f000 f830 	bl	8006eb0 <_init>
 8006e50:	2600      	movs	r6, #0
 8006e52:	4d0a      	ldr	r5, [pc, #40]	; (8006e7c <__libc_init_array+0x40>)
 8006e54:	4c0a      	ldr	r4, [pc, #40]	; (8006e80 <__libc_init_array+0x44>)
 8006e56:	1b64      	subs	r4, r4, r5
 8006e58:	10a4      	asrs	r4, r4, #2
 8006e5a:	42a6      	cmp	r6, r4
 8006e5c:	d105      	bne.n	8006e6a <__libc_init_array+0x2e>
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}
 8006e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e64:	4798      	blx	r3
 8006e66:	3601      	adds	r6, #1
 8006e68:	e7ee      	b.n	8006e48 <__libc_init_array+0xc>
 8006e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e6e:	4798      	blx	r3
 8006e70:	3601      	adds	r6, #1
 8006e72:	e7f2      	b.n	8006e5a <__libc_init_array+0x1e>
 8006e74:	080070c4 	.word	0x080070c4
 8006e78:	080070c4 	.word	0x080070c4
 8006e7c:	080070c4 	.word	0x080070c4
 8006e80:	080070c8 	.word	0x080070c8

08006e84 <memcpy>:
 8006e84:	440a      	add	r2, r1
 8006e86:	4291      	cmp	r1, r2
 8006e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e8c:	d100      	bne.n	8006e90 <memcpy+0xc>
 8006e8e:	4770      	bx	lr
 8006e90:	b510      	push	{r4, lr}
 8006e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e96:	4291      	cmp	r1, r2
 8006e98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e9c:	d1f9      	bne.n	8006e92 <memcpy+0xe>
 8006e9e:	bd10      	pop	{r4, pc}

08006ea0 <memset>:
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	4402      	add	r2, r0
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d100      	bne.n	8006eaa <memset+0xa>
 8006ea8:	4770      	bx	lr
 8006eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8006eae:	e7f9      	b.n	8006ea4 <memset+0x4>

08006eb0 <_init>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	bf00      	nop
 8006eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eb6:	bc08      	pop	{r3}
 8006eb8:	469e      	mov	lr, r3
 8006eba:	4770      	bx	lr

08006ebc <_fini>:
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebe:	bf00      	nop
 8006ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ec2:	bc08      	pop	{r3}
 8006ec4:	469e      	mov	lr, r3
 8006ec6:	4770      	bx	lr
